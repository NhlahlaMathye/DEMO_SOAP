
/**
 * CountryInfoServiceStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.6.2  Built on : Apr 17, 2012 (05:33:49 IST)
 */
        package org.oorsprong.websamples_countryinfo;

        

        /*
        *  CountryInfoServiceStub java implementation
        */


public class CountryInfoServiceStub extends org.apache.axis2.client.Stub
        implements CountryInfoService{
        protected org.apache.axis2.description.AxisOperation[] _operations;

        //hashmaps to keep the fault mapping
        private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
        private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
        private java.util.HashMap faultMessageMap = new java.util.HashMap();

        private static int counter = 0;

        private static synchronized java.lang.String getUniqueSuffix(){
            // reset the counter if it is greater than 99999
            if (counter > 99999){
                counter = 0;
            }
            counter = counter + 1; 
            return java.lang.Long.toString(java.lang.System.currentTimeMillis()) + "_" + counter;
        }

    
    private void populateAxisService() throws org.apache.axis2.AxisFault {

     //creating the Service with a unique name
     _service = new org.apache.axis2.description.AxisService("CountryInfoService" + getUniqueSuffix());
     addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[21];
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "fullCountryInfo"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[0]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "countryFlag"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[1]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "countryName"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[2]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "countryCurrency"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[3]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfCountryNamesByCode"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[4]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfCurrenciesByName"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[5]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "countryIntPhoneCode"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[6]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "currencyName"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[7]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfCurrenciesByCode"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[8]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfLanguagesByCode"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[9]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "languageISOCode"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[10]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "capitalCity"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[11]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfLanguagesByName"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[12]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfCountryNamesGroupedByContinent"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[13]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfCountryNamesByName"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[14]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfContinentsByName"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[15]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "languageName"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[16]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "listOfContinentsByCode"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[17]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "countriesUsingCurrency"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[18]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "countryISOCode"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[19]=__operation;
            
        
                   __operation = new org.apache.axis2.description.OutInAxisOperation();
                

            __operation.setName(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo", "fullCountryInfoAllCountries"));
	    _service.addOperation(__operation);
	    

	    
	    
            _operations[20]=__operation;
            
        
        }

    //populates the faults
    private void populateFaults(){
         


    }

    /**
      *Constructor that takes in a configContext
      */

    public CountryInfoServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
       java.lang.String targetEndpoint)
       throws org.apache.axis2.AxisFault {
         this(configurationContext,targetEndpoint,false);
   }


   /**
     * Constructor that takes in a configContext  and useseperate listner
     */
   public CountryInfoServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
         //To populate AxisService
         populateAxisService();
         populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,_service);
        
	
        _serviceClient.getOptions().setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
        
            //Set the soap version
            _serviceClient.getOptions().setSoapVersionURI(org.apache.axiom.soap.SOAP12Constants.SOAP_ENVELOPE_NAMESPACE_URI);
        
    
    }

    /**
     * Default Constructor
     */
    public CountryInfoServiceStub(org.apache.axis2.context.ConfigurationContext configurationContext) throws org.apache.axis2.AxisFault {
        
                    this(configurationContext,"http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso" );
                
    }

    /**
     * Default Constructor
     */
    public CountryInfoServiceStub() throws org.apache.axis2.AxisFault {
        
                    this("http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso" );
                
    }

    /**
     * Constructor taking the target endpoint
     */
    public CountryInfoServiceStub(java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(null,targetEndpoint);
    }



        
                    /**
                     * Auto generated method signature
                     * Returns a struct with all the stored country information. Pass the ISO country code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#fullCountryInfo
                     * @param fullCountryInfo42
                    
                     */

                    

                            public FullCountryInfoResponse fullCountryInfo(

                            FullCountryInfo fullCountryInfo42)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/FullCountryInfoRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    fullCountryInfo42,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfo")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfo"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             FullCountryInfoResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (FullCountryInfoResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfo"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfo"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfo"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a struct with all the stored country information. Pass the ISO country code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startfullCountryInfo
                    * @param fullCountryInfo42
                
                */
                public  void startfullCountryInfo(

                 FullCountryInfo fullCountryInfo42,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/FullCountryInfoRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    fullCountryInfo42,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfo")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfo"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         FullCountryInfoResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultfullCountryInfo(
                                        (FullCountryInfoResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorfullCountryInfo(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfo"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfo"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfo"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorfullCountryInfo(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfo(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfo(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfo(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfo(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfo(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfo(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfo(f);
                                            }
									    } else {
										    callback.receiveErrorfullCountryInfo(f);
									    }
									} else {
									    callback.receiveErrorfullCountryInfo(f);
									}
								} else {
								    callback.receiveErrorfullCountryInfo(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorfullCountryInfo(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[0].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[0].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a link to a picture of the country flag
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#countryFlag
                     * @param countryFlag44
                    
                     */

                    

                            public CountryFlagResponse countryFlag(

                            CountryFlag countryFlag44)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryFlagRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryFlag44,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryFlag")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryFlag"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CountryFlagResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CountryFlagResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryFlag"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryFlag"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryFlag"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a link to a picture of the country flag
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcountryFlag
                    * @param countryFlag44
                
                */
                public  void startcountryFlag(

                 CountryFlag countryFlag44,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryFlagRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryFlag44,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryFlag")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryFlag"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CountryFlagResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcountryFlag(
                                        (CountryFlagResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcountryFlag(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryFlag"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryFlag"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryFlag"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcountryFlag(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryFlag(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryFlag(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryFlag(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryFlag(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryFlag(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryFlag(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryFlag(f);
                                            }
									    } else {
										    callback.receiveErrorcountryFlag(f);
									    }
									} else {
									    callback.receiveErrorcountryFlag(f);
									}
								} else {
								    callback.receiveErrorcountryFlag(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcountryFlag(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[1].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[1].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Searches the database for a country by the passed ISO country code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#countryName
                     * @param countryName46
                    
                     */

                    

                            public CountryNameResponse countryName(

                            CountryName countryName46)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryNameRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryName46,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryName"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CountryNameResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CountryNameResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryName"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryName"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryName"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Searches the database for a country by the passed ISO country code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcountryName
                    * @param countryName46
                
                */
                public  void startcountryName(

                 CountryName countryName46,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryNameRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryName46,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryName"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CountryNameResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcountryName(
                                        (CountryNameResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcountryName(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryName"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryName"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryName"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcountryName(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryName(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryName(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryName(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryName(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryName(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryName(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryName(f);
                                            }
									    } else {
										    callback.receiveErrorcountryName(f);
									    }
									} else {
									    callback.receiveErrorcountryName(f);
									}
								} else {
								    callback.receiveErrorcountryName(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcountryName(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[2].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[2].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns the currency ISO code and name for the passed country ISO code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#countryCurrency
                     * @param countryCurrency48
                    
                     */

                    

                            public CountryCurrencyResponse countryCurrency(

                            CountryCurrency countryCurrency48)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryCurrencyRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryCurrency48,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryCurrency")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryCurrency"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CountryCurrencyResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CountryCurrencyResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryCurrency"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryCurrency"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryCurrency"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns the currency ISO code and name for the passed country ISO code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcountryCurrency
                    * @param countryCurrency48
                
                */
                public  void startcountryCurrency(

                 CountryCurrency countryCurrency48,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryCurrencyRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryCurrency48,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryCurrency")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryCurrency"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CountryCurrencyResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcountryCurrency(
                                        (CountryCurrencyResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcountryCurrency(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryCurrency"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryCurrency"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryCurrency"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcountryCurrency(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryCurrency(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryCurrency(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryCurrency(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryCurrency(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryCurrency(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryCurrency(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryCurrency(f);
                                            }
									    } else {
										    callback.receiveErrorcountryCurrency(f);
									    }
									} else {
									    callback.receiveErrorcountryCurrency(f);
									}
								} else {
								    callback.receiveErrorcountryCurrency(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcountryCurrency(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[3].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[3].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of all stored counties ordered by ISO code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfCountryNamesByCode
                     * @param listOfCountryNamesByCode50
                    
                     */

                    

                            public ListOfCountryNamesByCodeResponse listOfCountryNamesByCode(

                            ListOfCountryNamesByCode listOfCountryNamesByCode50)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCountryNamesByCodeRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCountryNamesByCode50,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByCode"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfCountryNamesByCodeResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfCountryNamesByCodeResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByCode"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByCode"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByCode"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of all stored counties ordered by ISO code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfCountryNamesByCode
                    * @param listOfCountryNamesByCode50
                
                */
                public  void startlistOfCountryNamesByCode(

                 ListOfCountryNamesByCode listOfCountryNamesByCode50,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCountryNamesByCodeRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCountryNamesByCode50,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByCode"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfCountryNamesByCodeResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfCountryNamesByCode(
                                        (ListOfCountryNamesByCodeResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfCountryNamesByCode(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByCode"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByCode"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByCode"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfCountryNamesByCode(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByCode(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByCode(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByCode(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByCode(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByCode(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByCode(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByCode(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfCountryNamesByCode(f);
									    }
									} else {
									    callback.receiveErrorlistOfCountryNamesByCode(f);
									}
								} else {
								    callback.receiveErrorlistOfCountryNamesByCode(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfCountryNamesByCode(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[4].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[4].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of currencies ordered by name.
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfCurrenciesByName
                     * @param listOfCurrenciesByName52
                    
                     */

                    

                            public ListOfCurrenciesByNameResponse listOfCurrenciesByName(

                            ListOfCurrenciesByName listOfCurrenciesByName52)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCurrenciesByNameRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCurrenciesByName52,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByName"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfCurrenciesByNameResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfCurrenciesByNameResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByName"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByName"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByName"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of currencies ordered by name.
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfCurrenciesByName
                    * @param listOfCurrenciesByName52
                
                */
                public  void startlistOfCurrenciesByName(

                 ListOfCurrenciesByName listOfCurrenciesByName52,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCurrenciesByNameRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCurrenciesByName52,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByName"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfCurrenciesByNameResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfCurrenciesByName(
                                        (ListOfCurrenciesByNameResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfCurrenciesByName(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByName"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByName"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByName"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfCurrenciesByName(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByName(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByName(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByName(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByName(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByName(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByName(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByName(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfCurrenciesByName(f);
									    }
									} else {
									    callback.receiveErrorlistOfCurrenciesByName(f);
									}
								} else {
								    callback.receiveErrorlistOfCurrenciesByName(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfCurrenciesByName(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[5].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[5].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns the internation phone code for the passed ISO country code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#countryIntPhoneCode
                     * @param countryIntPhoneCode54
                    
                     */

                    

                            public CountryIntPhoneCodeResponse countryIntPhoneCode(

                            CountryIntPhoneCode countryIntPhoneCode54)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryIntPhoneCodeRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryIntPhoneCode54,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryIntPhoneCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryIntPhoneCode"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CountryIntPhoneCodeResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CountryIntPhoneCodeResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryIntPhoneCode"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryIntPhoneCode"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryIntPhoneCode"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns the internation phone code for the passed ISO country code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcountryIntPhoneCode
                    * @param countryIntPhoneCode54
                
                */
                public  void startcountryIntPhoneCode(

                 CountryIntPhoneCode countryIntPhoneCode54,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryIntPhoneCodeRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryIntPhoneCode54,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryIntPhoneCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryIntPhoneCode"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CountryIntPhoneCodeResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcountryIntPhoneCode(
                                        (CountryIntPhoneCodeResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcountryIntPhoneCode(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryIntPhoneCode"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryIntPhoneCode"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryIntPhoneCode"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcountryIntPhoneCode(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryIntPhoneCode(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryIntPhoneCode(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryIntPhoneCode(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryIntPhoneCode(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryIntPhoneCode(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryIntPhoneCode(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryIntPhoneCode(f);
                                            }
									    } else {
										    callback.receiveErrorcountryIntPhoneCode(f);
									    }
									} else {
									    callback.receiveErrorcountryIntPhoneCode(f);
									}
								} else {
								    callback.receiveErrorcountryIntPhoneCode(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcountryIntPhoneCode(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[6].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[6].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns the name of the currency (if found)
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#currencyName
                     * @param currencyName56
                    
                     */

                    

                            public CurrencyNameResponse currencyName(

                            CurrencyName currencyName56)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CurrencyNameRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    currencyName56,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "currencyName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "currencyName"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CurrencyNameResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CurrencyNameResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CurrencyName"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CurrencyName"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CurrencyName"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns the name of the currency (if found)
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcurrencyName
                    * @param currencyName56
                
                */
                public  void startcurrencyName(

                 CurrencyName currencyName56,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[7].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CurrencyNameRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    currencyName56,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "currencyName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "currencyName"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CurrencyNameResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcurrencyName(
                                        (CurrencyNameResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcurrencyName(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CurrencyName"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CurrencyName"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CurrencyName"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcurrencyName(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcurrencyName(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcurrencyName(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcurrencyName(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcurrencyName(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcurrencyName(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcurrencyName(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcurrencyName(f);
                                            }
									    } else {
										    callback.receiveErrorcurrencyName(f);
									    }
									} else {
									    callback.receiveErrorcurrencyName(f);
									}
								} else {
								    callback.receiveErrorcurrencyName(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcurrencyName(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[7].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[7].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of currencies ordered by code.
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfCurrenciesByCode
                     * @param listOfCurrenciesByCode58
                    
                     */

                    

                            public ListOfCurrenciesByCodeResponse listOfCurrenciesByCode(

                            ListOfCurrenciesByCode listOfCurrenciesByCode58)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCurrenciesByCodeRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCurrenciesByCode58,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByCode"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfCurrenciesByCodeResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfCurrenciesByCodeResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByCode"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByCode"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByCode"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of currencies ordered by code.
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfCurrenciesByCode
                    * @param listOfCurrenciesByCode58
                
                */
                public  void startlistOfCurrenciesByCode(

                 ListOfCurrenciesByCode listOfCurrenciesByCode58,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[8].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCurrenciesByCodeRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCurrenciesByCode58,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCurrenciesByCode"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfCurrenciesByCodeResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfCurrenciesByCode(
                                        (ListOfCurrenciesByCodeResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfCurrenciesByCode(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByCode"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByCode"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCurrenciesByCode"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfCurrenciesByCode(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByCode(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByCode(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByCode(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByCode(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByCode(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByCode(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCurrenciesByCode(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfCurrenciesByCode(f);
									    }
									} else {
									    callback.receiveErrorlistOfCurrenciesByCode(f);
									}
								} else {
								    callback.receiveErrorlistOfCurrenciesByCode(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfCurrenciesByCode(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[8].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[8].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns an array of languages ordered by code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfLanguagesByCode
                     * @param listOfLanguagesByCode60
                    
                     */

                    

                            public ListOfLanguagesByCodeResponse listOfLanguagesByCode(

                            ListOfLanguagesByCode listOfLanguagesByCode60)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfLanguagesByCodeRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfLanguagesByCode60,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByCode"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfLanguagesByCodeResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfLanguagesByCodeResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByCode"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByCode"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByCode"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns an array of languages ordered by code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfLanguagesByCode
                    * @param listOfLanguagesByCode60
                
                */
                public  void startlistOfLanguagesByCode(

                 ListOfLanguagesByCode listOfLanguagesByCode60,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[9].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfLanguagesByCodeRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfLanguagesByCode60,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByCode"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfLanguagesByCodeResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfLanguagesByCode(
                                        (ListOfLanguagesByCodeResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfLanguagesByCode(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByCode"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByCode"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByCode"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfLanguagesByCode(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByCode(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByCode(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByCode(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByCode(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByCode(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByCode(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByCode(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfLanguagesByCode(f);
									    }
									} else {
									    callback.receiveErrorlistOfLanguagesByCode(f);
									}
								} else {
								    callback.receiveErrorlistOfLanguagesByCode(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfLanguagesByCode(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[9].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[9].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Find a language ISO code based on the passed language name
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#languageISOCode
                     * @param languageISOCode62
                    
                     */

                    

                            public LanguageISOCodeResponse languageISOCode(

                            LanguageISOCode languageISOCode62)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/LanguageISOCodeRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    languageISOCode62,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageISOCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageISOCode"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             LanguageISOCodeResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (LanguageISOCodeResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageISOCode"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageISOCode"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageISOCode"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Find a language ISO code based on the passed language name
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlanguageISOCode
                    * @param languageISOCode62
                
                */
                public  void startlanguageISOCode(

                 LanguageISOCode languageISOCode62,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[10].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/LanguageISOCodeRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    languageISOCode62,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageISOCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageISOCode"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         LanguageISOCodeResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlanguageISOCode(
                                        (LanguageISOCodeResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlanguageISOCode(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageISOCode"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageISOCode"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageISOCode"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlanguageISOCode(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageISOCode(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageISOCode(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageISOCode(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageISOCode(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageISOCode(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageISOCode(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageISOCode(f);
                                            }
									    } else {
										    callback.receiveErrorlanguageISOCode(f);
									    }
									} else {
									    callback.receiveErrorlanguageISOCode(f);
									}
								} else {
								    callback.receiveErrorlanguageISOCode(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlanguageISOCode(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[10].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[10].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns the  name of the captial city for the passed country code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#capitalCity
                     * @param capitalCity64
                    
                     */

                    

                            public CapitalCityResponse capitalCity(

                            CapitalCity capitalCity64)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CapitalCityRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    capitalCity64,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "capitalCity")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "capitalCity"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CapitalCityResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CapitalCityResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CapitalCity"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CapitalCity"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CapitalCity"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns the  name of the captial city for the passed country code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcapitalCity
                    * @param capitalCity64
                
                */
                public  void startcapitalCity(

                 CapitalCity capitalCity64,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[11].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CapitalCityRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    capitalCity64,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "capitalCity")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "capitalCity"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CapitalCityResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcapitalCity(
                                        (CapitalCityResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcapitalCity(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CapitalCity"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CapitalCity"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CapitalCity"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcapitalCity(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcapitalCity(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcapitalCity(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcapitalCity(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcapitalCity(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcapitalCity(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcapitalCity(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcapitalCity(f);
                                            }
									    } else {
										    callback.receiveErrorcapitalCity(f);
									    }
									} else {
									    callback.receiveErrorcapitalCity(f);
									}
								} else {
								    callback.receiveErrorcapitalCity(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcapitalCity(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[11].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[11].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns an array of languages ordered by name
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfLanguagesByName
                     * @param listOfLanguagesByName66
                    
                     */

                    

                            public ListOfLanguagesByNameResponse listOfLanguagesByName(

                            ListOfLanguagesByName listOfLanguagesByName66)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfLanguagesByNameRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfLanguagesByName66,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByName"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfLanguagesByNameResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfLanguagesByNameResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByName"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByName"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByName"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns an array of languages ordered by name
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfLanguagesByName
                    * @param listOfLanguagesByName66
                
                */
                public  void startlistOfLanguagesByName(

                 ListOfLanguagesByName listOfLanguagesByName66,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[12].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfLanguagesByNameRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfLanguagesByName66,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfLanguagesByName"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfLanguagesByNameResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfLanguagesByName(
                                        (ListOfLanguagesByNameResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfLanguagesByName(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByName"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByName"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfLanguagesByName"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfLanguagesByName(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByName(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByName(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByName(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByName(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByName(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByName(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfLanguagesByName(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfLanguagesByName(f);
									    }
									} else {
									    callback.receiveErrorlistOfLanguagesByName(f);
									}
								} else {
								    callback.receiveErrorlistOfLanguagesByName(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfLanguagesByName(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[12].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[12].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of all stored counties grouped per continent
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfCountryNamesGroupedByContinent
                     * @param listOfCountryNamesGroupedByContinent68
                    
                     */

                    

                            public ListOfCountryNamesGroupedByContinentResponse listOfCountryNamesGroupedByContinent(

                            ListOfCountryNamesGroupedByContinent listOfCountryNamesGroupedByContinent68)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCountryNamesGroupedByContinentRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCountryNamesGroupedByContinent68,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesGroupedByContinent")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesGroupedByContinent"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfCountryNamesGroupedByContinentResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfCountryNamesGroupedByContinentResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesGroupedByContinent"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesGroupedByContinent"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesGroupedByContinent"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of all stored counties grouped per continent
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfCountryNamesGroupedByContinent
                    * @param listOfCountryNamesGroupedByContinent68
                
                */
                public  void startlistOfCountryNamesGroupedByContinent(

                 ListOfCountryNamesGroupedByContinent listOfCountryNamesGroupedByContinent68,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[13].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCountryNamesGroupedByContinentRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCountryNamesGroupedByContinent68,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesGroupedByContinent")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesGroupedByContinent"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfCountryNamesGroupedByContinentResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfCountryNamesGroupedByContinent(
                                        (ListOfCountryNamesGroupedByContinentResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesGroupedByContinent"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesGroupedByContinent"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesGroupedByContinent"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfCountryNamesGroupedByContinent(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
									    }
									} else {
									    callback.receiveErrorlistOfCountryNamesGroupedByContinent(f);
									}
								} else {
								    callback.receiveErrorlistOfCountryNamesGroupedByContinent(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfCountryNamesGroupedByContinent(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[13].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[13].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of all stored counties ordered by country name
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfCountryNamesByName
                     * @param listOfCountryNamesByName70
                    
                     */

                    

                            public ListOfCountryNamesByNameResponse listOfCountryNamesByName(

                            ListOfCountryNamesByName listOfCountryNamesByName70)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCountryNamesByNameRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCountryNamesByName70,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByName"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfCountryNamesByNameResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfCountryNamesByNameResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByName"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByName"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByName"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of all stored counties ordered by country name
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfCountryNamesByName
                    * @param listOfCountryNamesByName70
                
                */
                public  void startlistOfCountryNamesByName(

                 ListOfCountryNamesByName listOfCountryNamesByName70,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[14].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfCountryNamesByNameRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfCountryNamesByName70,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfCountryNamesByName"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfCountryNamesByNameResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfCountryNamesByName(
                                        (ListOfCountryNamesByNameResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfCountryNamesByName(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByName"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByName"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfCountryNamesByName"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfCountryNamesByName(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByName(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByName(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByName(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByName(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByName(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByName(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfCountryNamesByName(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfCountryNamesByName(f);
									    }
									} else {
									    callback.receiveErrorlistOfCountryNamesByName(f);
									}
								} else {
								    callback.receiveErrorlistOfCountryNamesByName(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfCountryNamesByName(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[14].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[14].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of continents ordered by name.
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfContinentsByName
                     * @param listOfContinentsByName72
                    
                     */

                    

                            public ListOfContinentsByNameResponse listOfContinentsByName(

                            ListOfContinentsByName listOfContinentsByName72)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfContinentsByNameRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfContinentsByName72,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByName"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfContinentsByNameResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfContinentsByNameResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByName"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByName"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByName"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of continents ordered by name.
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfContinentsByName
                    * @param listOfContinentsByName72
                
                */
                public  void startlistOfContinentsByName(

                 ListOfContinentsByName listOfContinentsByName72,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[15].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfContinentsByNameRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfContinentsByName72,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByName"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfContinentsByNameResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfContinentsByName(
                                        (ListOfContinentsByNameResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfContinentsByName(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByName"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByName"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByName"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfContinentsByName(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByName(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByName(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByName(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByName(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByName(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByName(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByName(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfContinentsByName(f);
									    }
									} else {
									    callback.receiveErrorlistOfContinentsByName(f);
									}
								} else {
								    callback.receiveErrorlistOfContinentsByName(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfContinentsByName(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[15].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[15].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Find a language name based on the passed ISO language code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#languageName
                     * @param languageName74
                    
                     */

                    

                            public LanguageNameResponse languageName(

                            LanguageName languageName74)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/LanguageNameRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    languageName74,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageName"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             LanguageNameResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (LanguageNameResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageName"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageName"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageName"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Find a language name based on the passed ISO language code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlanguageName
                    * @param languageName74
                
                */
                public  void startlanguageName(

                 LanguageName languageName74,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[16].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/LanguageNameRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    languageName74,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageName")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "languageName"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         LanguageNameResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlanguageName(
                                        (LanguageNameResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlanguageName(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageName"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageName"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"LanguageName"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlanguageName(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageName(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageName(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageName(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageName(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageName(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageName(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlanguageName(f);
                                            }
									    } else {
										    callback.receiveErrorlanguageName(f);
									    }
									} else {
									    callback.receiveErrorlanguageName(f);
									}
								} else {
								    callback.receiveErrorlanguageName(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlanguageName(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[16].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[16].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of continents ordered by code.
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#listOfContinentsByCode
                     * @param listOfContinentsByCode76
                    
                     */

                    

                            public ListOfContinentsByCodeResponse listOfContinentsByCode(

                            ListOfContinentsByCode listOfContinentsByCode76)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfContinentsByCodeRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfContinentsByCode76,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByCode"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             ListOfContinentsByCodeResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (ListOfContinentsByCodeResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByCode"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByCode"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByCode"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of continents ordered by code.
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startlistOfContinentsByCode
                    * @param listOfContinentsByCode76
                
                */
                public  void startlistOfContinentsByCode(

                 ListOfContinentsByCode listOfContinentsByCode76,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[17].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/ListOfContinentsByCodeRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    listOfContinentsByCode76,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "listOfContinentsByCode"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         ListOfContinentsByCodeResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultlistOfContinentsByCode(
                                        (ListOfContinentsByCodeResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorlistOfContinentsByCode(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByCode"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByCode"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"ListOfContinentsByCode"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorlistOfContinentsByCode(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByCode(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByCode(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByCode(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByCode(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByCode(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByCode(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorlistOfContinentsByCode(f);
                                            }
									    } else {
										    callback.receiveErrorlistOfContinentsByCode(f);
									    }
									} else {
									    callback.receiveErrorlistOfContinentsByCode(f);
									}
								} else {
								    callback.receiveErrorlistOfContinentsByCode(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorlistOfContinentsByCode(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[17].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[17].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns a list of all countries that use the same currency code. Pass a ISO currency code
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#countriesUsingCurrency
                     * @param countriesUsingCurrency78
                    
                     */

                    

                            public CountriesUsingCurrencyResponse countriesUsingCurrency(

                            CountriesUsingCurrency countriesUsingCurrency78)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountriesUsingCurrencyRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countriesUsingCurrency78,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countriesUsingCurrency")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countriesUsingCurrency"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CountriesUsingCurrencyResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CountriesUsingCurrencyResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountriesUsingCurrency"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountriesUsingCurrency"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountriesUsingCurrency"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns a list of all countries that use the same currency code. Pass a ISO currency code
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcountriesUsingCurrency
                    * @param countriesUsingCurrency78
                
                */
                public  void startcountriesUsingCurrency(

                 CountriesUsingCurrency countriesUsingCurrency78,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[18].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountriesUsingCurrencyRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countriesUsingCurrency78,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countriesUsingCurrency")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countriesUsingCurrency"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CountriesUsingCurrencyResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcountriesUsingCurrency(
                                        (CountriesUsingCurrencyResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcountriesUsingCurrency(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountriesUsingCurrency"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountriesUsingCurrency"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountriesUsingCurrency"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcountriesUsingCurrency(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountriesUsingCurrency(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountriesUsingCurrency(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountriesUsingCurrency(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountriesUsingCurrency(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountriesUsingCurrency(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountriesUsingCurrency(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountriesUsingCurrency(f);
                                            }
									    } else {
										    callback.receiveErrorcountriesUsingCurrency(f);
									    }
									} else {
									    callback.receiveErrorcountriesUsingCurrency(f);
									}
								} else {
								    callback.receiveErrorcountriesUsingCurrency(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcountriesUsingCurrency(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[18].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[18].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * This function tries to found a country based on the passed country name.
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#countryISOCode
                     * @param countryISOCode80
                    
                     */

                    

                            public CountryISOCodeResponse countryISOCode(

                            CountryISOCode countryISOCode80)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryISOCodeRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryISOCode80,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryISOCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryISOCode"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             CountryISOCodeResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (CountryISOCodeResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryISOCode"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryISOCode"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryISOCode"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * This function tries to found a country based on the passed country name.
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startcountryISOCode
                    * @param countryISOCode80
                
                */
                public  void startcountryISOCode(

                 CountryISOCode countryISOCode80,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[19].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/CountryISOCodeRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    countryISOCode80,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryISOCode")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "countryISOCode"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         CountryISOCodeResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultcountryISOCode(
                                        (CountryISOCodeResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorcountryISOCode(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryISOCode"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryISOCode"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"CountryISOCode"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorcountryISOCode(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryISOCode(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryISOCode(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryISOCode(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryISOCode(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryISOCode(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryISOCode(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorcountryISOCode(f);
                                            }
									    } else {
										    callback.receiveErrorcountryISOCode(f);
									    }
									} else {
									    callback.receiveErrorcountryISOCode(f);
									}
								} else {
								    callback.receiveErrorcountryISOCode(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorcountryISOCode(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[19].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[19].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                
                    /**
                     * Auto generated method signature
                     * Returns an array with all countries and all the language information stored
                     * @see org.oorsprong.websamples_countryinfo.CountryInfoService#fullCountryInfoAllCountries
                     * @param fullCountryInfoAllCountries82
                    
                     */

                    

                            public FullCountryInfoAllCountriesResponse fullCountryInfoAllCountries(

                            FullCountryInfoAllCountries fullCountryInfoAllCountries82)
                        

                    throws java.rmi.RemoteException
                    
                    {
              org.apache.axis2.context.MessageContext _messageContext = null;
              try{
               org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
              _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/FullCountryInfoAllCountriesRequest");
              _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              

              // create a message context
              _messageContext = new org.apache.axis2.context.MessageContext();

              

              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env = null;
                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    fullCountryInfoAllCountries82,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfoAllCountries")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfoAllCountries"));
                                                
        //adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // set the message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message contxt to the operation client
        _operationClient.addMessageContext(_messageContext);

        //execute the operation client
        _operationClient.execute(true);

         
               org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(
                                           org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
                org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();
                
                
                                java.lang.Object object = fromOM(
                                             _returnEnv.getBody().getFirstElement() ,
                                             FullCountryInfoAllCountriesResponse.class,
                                              getEnvelopeNamespaces(_returnEnv));

                               
                                        return (FullCountryInfoAllCountriesResponse)object;
                                   
         }catch(org.apache.axis2.AxisFault f){

            org.apache.axiom.om.OMElement faultElt = f.getDetail();
            if (faultElt!=null){
                if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfoAllCountries"))){
                    //make the fault by reflection
                    try{
                        java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfoAllCountries"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
                        //message class
                        java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfoAllCountries"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                   new java.lang.Class[]{messageClass});
                        m.invoke(ex,new java.lang.Object[]{messageObject});
                        

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    }catch(java.lang.ClassCastException e){
                       // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }  catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }   catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                }else{
                    throw f;
                }
            }else{
                throw f;
            }
            } finally {
                if (_messageContext.getTransportOut() != null) {
                      _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                }
            }
        }
            
                /**
                * Auto generated method signature for Asynchronous Invocations
                * Returns an array with all countries and all the language information stored
                * @see org.oorsprong.websamples_countryinfo.CountryInfoService#startfullCountryInfoAllCountries
                    * @param fullCountryInfoAllCountries82
                
                */
                public  void startfullCountryInfoAllCountries(

                 FullCountryInfoAllCountries fullCountryInfoAllCountries82,

                  final org.oorsprong.websamples_countryinfo.CountryInfoServiceCallbackHandler callback)

                throws java.rmi.RemoteException{

              org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[20].getName());
             _operationClient.getOptions().setAction("http://www.oorsprong.org/websamples.countryinfo/CountryInfoServiceSoapType/FullCountryInfoAllCountriesRequest");
             _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

              
              
                  addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");
              


              // create SOAP envelope with that payload
              org.apache.axiom.soap.SOAPEnvelope env=null;
              final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

                    
                                    //Style is Doc.
                                    
                                                    
                                                    env = toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),
                                                    fullCountryInfoAllCountries82,
                                                    optimizeContent(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfoAllCountries")), new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                    "fullCountryInfoAllCountries"));
                                                
        // adding SOAP soap_headers
         _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);


                    
                        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                            public void onMessage(org.apache.axis2.context.MessageContext resultContext) {
                            try {
                                org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();
                                
                                        java.lang.Object object = fromOM(resultEnv.getBody().getFirstElement(),
                                                                         FullCountryInfoAllCountriesResponse.class,
                                                                         getEnvelopeNamespaces(resultEnv));
                                        callback.receiveResultfullCountryInfoAllCountries(
                                        (FullCountryInfoAllCountriesResponse)object);
                                        
                            } catch (org.apache.axis2.AxisFault e) {
                                callback.receiveErrorfullCountryInfoAllCountries(e);
                            }
                            }

                            public void onError(java.lang.Exception error) {
								if (error instanceof org.apache.axis2.AxisFault) {
									org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
									org.apache.axiom.om.OMElement faultElt = f.getDetail();
									if (faultElt!=null){
										if (faultExceptionNameMap.containsKey(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfoAllCountries"))){
											//make the fault by reflection
											try{
													java.lang.String exceptionClassName = (java.lang.String)faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfoAllCountries"));
													java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
													java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(String.class);
                                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());
													//message class
													java.lang.String messageClassName = (java.lang.String)faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(faultElt.getQName(),"FullCountryInfoAllCountries"));
														java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
													java.lang.Object messageObject = fromOM(faultElt,messageClass,null);
													java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
															new java.lang.Class[]{messageClass});
													m.invoke(ex,new java.lang.Object[]{messageObject});
													
					
										            callback.receiveErrorfullCountryInfoAllCountries(new java.rmi.RemoteException(ex.getMessage(), ex));
                                            } catch(java.lang.ClassCastException e){
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfoAllCountries(f);
                                            } catch (java.lang.ClassNotFoundException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfoAllCountries(f);
                                            } catch (java.lang.NoSuchMethodException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfoAllCountries(f);
                                            } catch (java.lang.reflect.InvocationTargetException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfoAllCountries(f);
                                            } catch (java.lang.IllegalAccessException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfoAllCountries(f);
                                            } catch (java.lang.InstantiationException e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfoAllCountries(f);
                                            } catch (org.apache.axis2.AxisFault e) {
                                                // we cannot intantiate the class - throw the original Axis fault
                                                callback.receiveErrorfullCountryInfoAllCountries(f);
                                            }
									    } else {
										    callback.receiveErrorfullCountryInfoAllCountries(f);
									    }
									} else {
									    callback.receiveErrorfullCountryInfoAllCountries(f);
									}
								} else {
								    callback.receiveErrorfullCountryInfoAllCountries(error);
								}
                            }

                            public void onFault(org.apache.axis2.context.MessageContext faultContext) {
                                org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                                onError(fault);
                            }

                            public void onComplete() {
                                try {
                                    _messageContext.getTransportOut().getSender().cleanup(_messageContext);
                                } catch (org.apache.axis2.AxisFault axisFault) {
                                    callback.receiveErrorfullCountryInfoAllCountries(axisFault);
                                }
                            }
                });
                        

          org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;
        if ( _operations[20].getMessageReceiver()==null &&  _operationClient.getOptions().isUseSeparateListener()) {
           _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
          _operations[20].setMessageReceiver(
                    _callbackReceiver);
        }

           //execute the operation client
           _operationClient.execute(false);

                    }
                


       /**
        *  A utility method that copies the namepaces from the SOAPEnvelope
        */
       private java.util.Map getEnvelopeNamespaces(org.apache.axiom.soap.SOAPEnvelope env){
        java.util.Map returnMap = new java.util.HashMap();
        java.util.Iterator namespaceIterator = env.getAllDeclaredNamespaces();
        while (namespaceIterator.hasNext()) {
            org.apache.axiom.om.OMNamespace ns = (org.apache.axiom.om.OMNamespace) namespaceIterator.next();
            returnMap.put(ns.getPrefix(),ns.getNamespaceURI());
        }
       return returnMap;
    }

    
    
    private javax.xml.namespace.QName[] opNameArray = null;
    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        

        if (opNameArray == null) {
            return false;
        }
        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;   
            }
        }
        return false;
    }
     //http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso
            private  org.apache.axiom.om.OMElement  toOM(FullCountryInfo param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(FullCountryInfo.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(FullCountryInfoResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(FullCountryInfoResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryFlag param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryFlag.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryFlagResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryFlagResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryName param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryName.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryNameResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryNameResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryCurrency param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryCurrency.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryCurrencyResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryCurrencyResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCountryNamesByCode param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCountryNamesByCode.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCountryNamesByCodeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCountryNamesByCodeResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCurrenciesByName param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCurrenciesByName.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCurrenciesByNameResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCurrenciesByNameResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryIntPhoneCode param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryIntPhoneCode.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryIntPhoneCodeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryIntPhoneCodeResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CurrencyName param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CurrencyName.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CurrencyNameResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CurrencyNameResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCurrenciesByCode param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCurrenciesByCode.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCurrenciesByCodeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCurrenciesByCodeResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfLanguagesByCode param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfLanguagesByCode.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfLanguagesByCodeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfLanguagesByCodeResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(LanguageISOCode param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(LanguageISOCode.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(LanguageISOCodeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(LanguageISOCodeResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CapitalCity param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CapitalCity.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CapitalCityResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CapitalCityResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfLanguagesByName param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfLanguagesByName.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfLanguagesByNameResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfLanguagesByNameResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCountryNamesGroupedByContinent param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCountryNamesGroupedByContinent.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCountryNamesGroupedByContinentResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCountryNamesGroupedByContinentResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCountryNamesByName param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCountryNamesByName.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfCountryNamesByNameResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfCountryNamesByNameResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfContinentsByName param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfContinentsByName.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfContinentsByNameResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfContinentsByNameResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(LanguageName param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(LanguageName.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(LanguageNameResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(LanguageNameResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfContinentsByCode param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfContinentsByCode.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(ListOfContinentsByCodeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(ListOfContinentsByCodeResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountriesUsingCurrency param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountriesUsingCurrency.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountriesUsingCurrencyResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountriesUsingCurrencyResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryISOCode param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryISOCode.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(CountryISOCodeResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(CountryISOCodeResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(FullCountryInfoAllCountries param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(FullCountryInfoAllCountries.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
            private  org.apache.axiom.om.OMElement  toOM(FullCountryInfoAllCountriesResponse param, boolean optimizeContent)
            throws org.apache.axis2.AxisFault {

            
                        try{
                             return param.getOMElement(FullCountryInfoAllCountriesResponse.MY_QNAME,
                                          org.apache.axiom.om.OMAbstractFactory.getOMFactory());
                        } catch(org.apache.axis2.databinding.ADBException e){
                            throw org.apache.axis2.AxisFault.makeFault(e);
                        }
                    

            }
        
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, FullCountryInfo param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(FullCountryInfo.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CountryFlag param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CountryFlag.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CountryName param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CountryName.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CountryCurrency param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CountryCurrency.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfCountryNamesByCode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfCountryNamesByCode.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfCurrenciesByName param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfCurrenciesByName.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CountryIntPhoneCode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CountryIntPhoneCode.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CurrencyName param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CurrencyName.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfCurrenciesByCode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfCurrenciesByCode.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfLanguagesByCode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfLanguagesByCode.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, LanguageISOCode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(LanguageISOCode.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CapitalCity param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CapitalCity.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfLanguagesByName param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfLanguagesByName.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfCountryNamesGroupedByContinent param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfCountryNamesGroupedByContinent.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfCountryNamesByName param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfCountryNamesByName.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfContinentsByName param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfContinentsByName.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, LanguageName param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(LanguageName.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, ListOfContinentsByCode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(ListOfContinentsByCode.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CountriesUsingCurrency param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CountriesUsingCurrency.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, CountryISOCode param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(CountryISOCode.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             
                                    
                                        private  org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory, FullCountryInfoAllCountries param, boolean optimizeContent, javax.xml.namespace.QName methodQName)
                                        throws org.apache.axis2.AxisFault{

                                             
                                                    try{

                                                            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
                                                            emptyEnvelope.getBody().addChild(param.getOMElement(FullCountryInfoAllCountries.MY_QNAME,factory));
                                                            return emptyEnvelope;
                                                        } catch(org.apache.axis2.databinding.ADBException e){
                                                            throw org.apache.axis2.AxisFault.makeFault(e);
                                                        }
                                                

                                        }
                                
                             
                             /* methods to provide back word compatibility */

                             


        /**
        *  get the default envelope
        */
        private org.apache.axiom.soap.SOAPEnvelope toEnvelope(org.apache.axiom.soap.SOAPFactory factory){
        return factory.getDefaultEnvelope();
        }


        private  java.lang.Object fromOM(
        org.apache.axiom.om.OMElement param,
        java.lang.Class type,
        java.util.Map extraNamespaces) throws org.apache.axis2.AxisFault{

        try {
        
                if (FullCountryInfo.class.equals(type)){
                
                           return FullCountryInfo.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (FullCountryInfoResponse.class.equals(type)){
                
                           return FullCountryInfoResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryFlag.class.equals(type)){
                
                           return CountryFlag.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryFlagResponse.class.equals(type)){
                
                           return CountryFlagResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryName.class.equals(type)){
                
                           return CountryName.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryNameResponse.class.equals(type)){
                
                           return CountryNameResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryCurrency.class.equals(type)){
                
                           return CountryCurrency.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryCurrencyResponse.class.equals(type)){
                
                           return CountryCurrencyResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCountryNamesByCode.class.equals(type)){
                
                           return ListOfCountryNamesByCode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCountryNamesByCodeResponse.class.equals(type)){
                
                           return ListOfCountryNamesByCodeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCurrenciesByName.class.equals(type)){
                
                           return ListOfCurrenciesByName.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCurrenciesByNameResponse.class.equals(type)){
                
                           return ListOfCurrenciesByNameResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryIntPhoneCode.class.equals(type)){
                
                           return CountryIntPhoneCode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryIntPhoneCodeResponse.class.equals(type)){
                
                           return CountryIntPhoneCodeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CurrencyName.class.equals(type)){
                
                           return CurrencyName.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CurrencyNameResponse.class.equals(type)){
                
                           return CurrencyNameResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCurrenciesByCode.class.equals(type)){
                
                           return ListOfCurrenciesByCode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCurrenciesByCodeResponse.class.equals(type)){
                
                           return ListOfCurrenciesByCodeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfLanguagesByCode.class.equals(type)){
                
                           return ListOfLanguagesByCode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfLanguagesByCodeResponse.class.equals(type)){
                
                           return ListOfLanguagesByCodeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (LanguageISOCode.class.equals(type)){
                
                           return LanguageISOCode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (LanguageISOCodeResponse.class.equals(type)){
                
                           return LanguageISOCodeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CapitalCity.class.equals(type)){
                
                           return CapitalCity.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CapitalCityResponse.class.equals(type)){
                
                           return CapitalCityResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfLanguagesByName.class.equals(type)){
                
                           return ListOfLanguagesByName.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfLanguagesByNameResponse.class.equals(type)){
                
                           return ListOfLanguagesByNameResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCountryNamesGroupedByContinent.class.equals(type)){
                
                           return ListOfCountryNamesGroupedByContinent.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCountryNamesGroupedByContinentResponse.class.equals(type)){
                
                           return ListOfCountryNamesGroupedByContinentResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCountryNamesByName.class.equals(type)){
                
                           return ListOfCountryNamesByName.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfCountryNamesByNameResponse.class.equals(type)){
                
                           return ListOfCountryNamesByNameResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfContinentsByName.class.equals(type)){
                
                           return ListOfContinentsByName.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfContinentsByNameResponse.class.equals(type)){
                
                           return ListOfContinentsByNameResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (LanguageName.class.equals(type)){
                
                           return LanguageName.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (LanguageNameResponse.class.equals(type)){
                
                           return LanguageNameResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfContinentsByCode.class.equals(type)){
                
                           return ListOfContinentsByCode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (ListOfContinentsByCodeResponse.class.equals(type)){
                
                           return ListOfContinentsByCodeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountriesUsingCurrency.class.equals(type)){
                
                           return CountriesUsingCurrency.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountriesUsingCurrencyResponse.class.equals(type)){
                
                           return CountriesUsingCurrencyResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryISOCode.class.equals(type)){
                
                           return CountryISOCode.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (CountryISOCodeResponse.class.equals(type)){
                
                           return CountryISOCodeResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (FullCountryInfoAllCountries.class.equals(type)){
                
                           return FullCountryInfoAllCountries.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
                if (FullCountryInfoAllCountriesResponse.class.equals(type)){
                
                           return FullCountryInfoAllCountriesResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
                    

                }
           
        } catch (java.lang.Exception e) {
        throw org.apache.axis2.AxisFault.makeFault(e);
        }
           return null;
        }


    /**
    *  ArrayOftContinent bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ArrayOftContinent
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = ArrayOftContinent
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for TContinent
                * This was an Array!
                */


                            protected TContinent[] localTContinent ;

                   /*  This tracker boolean wil be used to detect whether the user called the set method
                  *   for this attribute. It will be used to determine whether to include this field
                   *   in the serialized XML
                   */
                   protected boolean localTContinentTracker = false ;

                   public boolean isTContinentSpecified(){
                       return localTContinentTracker;
                   }



                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TContinent[]
                   */
                   public  TContinent[] getTContinent(){
                       return localTContinent;
                   }






                      /**
                       * validate the array for TContinent
                       */
                      protected void validateTContinent(TContinent[] param){

                      }


                     /**
                      * Auto generated setter method
                      * @param param TContinent
                      */
                      public void setTContinent(TContinent[] param){

                           validateTContinent(param);

                       localTContinentTracker = true;

                              this.localTContinent=param;
                      }



                     /**
                     * Auto generated add method for the array for convenience
                     * @param param org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TContinent
                     */
                     public void addTContinent(TContinent param){
                           if (localTContinent == null){
                           localTContinent = new TContinent[]{};
                           }


                         //update the setting tracker
                        localTContinentTracker = true;


                       java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localTContinent);
                       list.add(param);
                       this.localTContinent =
                     (TContinent[])list.toArray(
                    new TContinent[list.size()]);

                     }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ArrayOftContinent",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ArrayOftContinent",
                   xmlWriter);
           }


           }
        if (localTContinentTracker){
                               if (localTContinent!=null){
                                    for (int i = 0;i < localTContinent.length;i++){
                                        if (localTContinent[i] != null){
                                         localTContinent[i].serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tContinent"),
                                                   xmlWriter);
                                        } else {

                                                    writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tContinent", xmlWriter);

                                                   // write the nil attribute
                                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                   xmlWriter.writeEndElement();

                                        }

                                    }
                             } else {

                                        writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tContinent", xmlWriter);

                                       // write the nil attribute
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                       xmlWriter.writeEndElement();

                            }
                         }
            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();

         if (localTContinentTracker){
                     if (localTContinent!=null) {
                         for (int i = 0;i < localTContinent.length;i++){

                            if (localTContinent[i] != null){
                                 elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tContinent"));
                                 elementList.add(localTContinent[i]);
                            } else {

                                        elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tContinent"));
                                        elementList.add(null);

                            }

                         }
                     } else {

                                elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tContinent"));
                                elementList.add(localTContinent);

                     }

                }

        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ArrayOftContinent parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ArrayOftContinent object =
        new ArrayOftContinent();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ArrayOftContinent".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ArrayOftContinent) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                java.util.ArrayList list1 = new java.util.ArrayList();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tContinent").equals(reader.getName())){



                            // Process the array and step past its final element's end.

                                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                      list1.add(null);
                                                      reader.next();
                                                  } else {
                                                list1.add(TContinent.Factory.parse(reader));
                                                        }
                                                //loop until we find a start element that is not part of this array
                                                boolean loopDone1 = false;
                                                while(!loopDone1){
                                                    // We should be at the end element, but make sure
                                                    while (!reader.isEndElement())
                                                        reader.next();
                                                    // Step out of this element
                                                    reader.next();
                                                    // Step to next element event.
                                                    while (!reader.isStartElement() && !reader.isEndElement())
                                                        reader.next();
                                                    if (reader.isEndElement()){
                                                        //two continuous end elements means we are exiting the xml structure
                                                        loopDone1 = true;
                                                    } else {
                                                        if (new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tContinent").equals(reader.getName())){

                                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                  list1.add(null);
                                                                  reader.next();
                                                              } else {
                                                            list1.add(TContinent.Factory.parse(reader));
                                                                }
                                                        }else{
                                                            loopDone1 = true;
                                                        }
                                                    }
                                                }
                                                // call the converter utility  to convert and set the array

                                                object.setTContinent((TContinent[])
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        TContinent.class,
                                                        list1));

                      }  // End of if for expected property start element

                            else {

                            }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ArrayOftCountryCodeAndName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ArrayOftCountryCodeAndName
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = ArrayOftCountryCodeAndName
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for TCountryCodeAndName
                * This was an Array!
                */


                            protected TCountryCodeAndName[] localTCountryCodeAndName ;

                   /*  This tracker boolean wil be used to detect whether the user called the set method
                  *   for this attribute. It will be used to determine whether to include this field
                   *   in the serialized XML
                   */
                   protected boolean localTCountryCodeAndNameTracker = false ;

                   public boolean isTCountryCodeAndNameSpecified(){
                       return localTCountryCodeAndNameTracker;
                   }



                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCountryCodeAndName[]
                   */
                   public  TCountryCodeAndName[] getTCountryCodeAndName(){
                       return localTCountryCodeAndName;
                   }






                      /**
                       * validate the array for TCountryCodeAndName
                       */
                      protected void validateTCountryCodeAndName(TCountryCodeAndName[] param){

                      }


                     /**
                      * Auto generated setter method
                      * @param param TCountryCodeAndName
                      */
                      public void setTCountryCodeAndName(TCountryCodeAndName[] param){

                           validateTCountryCodeAndName(param);

                       localTCountryCodeAndNameTracker = true;

                              this.localTCountryCodeAndName=param;
                      }



                     /**
                     * Auto generated add method for the array for convenience
                     * @param param org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCountryCodeAndName
                     */
                     public void addTCountryCodeAndName(TCountryCodeAndName param){
                           if (localTCountryCodeAndName == null){
                           localTCountryCodeAndName = new TCountryCodeAndName[]{};
                           }


                         //update the setting tracker
                        localTCountryCodeAndNameTracker = true;


                       java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localTCountryCodeAndName);
                       list.add(param);
                       this.localTCountryCodeAndName =
                     (TCountryCodeAndName[])list.toArray(
                    new TCountryCodeAndName[list.size()]);

                     }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ArrayOftCountryCodeAndName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ArrayOftCountryCodeAndName",
                   xmlWriter);
           }


           }
        if (localTCountryCodeAndNameTracker){
                               if (localTCountryCodeAndName!=null){
                                    for (int i = 0;i < localTCountryCodeAndName.length;i++){
                                        if (localTCountryCodeAndName[i] != null){
                                         localTCountryCodeAndName[i].serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryCodeAndName"),
                                                   xmlWriter);
                                        } else {

                                                    writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCountryCodeAndName", xmlWriter);

                                                   // write the nil attribute
                                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                   xmlWriter.writeEndElement();

                                        }

                                    }
                             } else {

                                        writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCountryCodeAndName", xmlWriter);

                                       // write the nil attribute
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                       xmlWriter.writeEndElement();

                            }
                         }
            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();

         if (localTCountryCodeAndNameTracker){
                     if (localTCountryCodeAndName!=null) {
                         for (int i = 0;i < localTCountryCodeAndName.length;i++){

                            if (localTCountryCodeAndName[i] != null){
                                 elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryCodeAndName"));
                                 elementList.add(localTCountryCodeAndName[i]);
                            } else {

                                        elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryCodeAndName"));
                                        elementList.add(null);

                            }

                         }
                     } else {

                                elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryCodeAndName"));
                                elementList.add(localTCountryCodeAndName);

                     }

                }

        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ArrayOftCountryCodeAndName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ArrayOftCountryCodeAndName object =
        new ArrayOftCountryCodeAndName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ArrayOftCountryCodeAndName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ArrayOftCountryCodeAndName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                java.util.ArrayList list1 = new java.util.ArrayList();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryCodeAndName").equals(reader.getName())){



                            // Process the array and step past its final element's end.

                                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                      list1.add(null);
                                                      reader.next();
                                                  } else {
                                                list1.add(TCountryCodeAndName.Factory.parse(reader));
                                                        }
                                                //loop until we find a start element that is not part of this array
                                                boolean loopDone1 = false;
                                                while(!loopDone1){
                                                    // We should be at the end element, but make sure
                                                    while (!reader.isEndElement())
                                                        reader.next();
                                                    // Step out of this element
                                                    reader.next();
                                                    // Step to next element event.
                                                    while (!reader.isStartElement() && !reader.isEndElement())
                                                        reader.next();
                                                    if (reader.isEndElement()){
                                                        //two continuous end elements means we are exiting the xml structure
                                                        loopDone1 = true;
                                                    } else {
                                                        if (new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryCodeAndName").equals(reader.getName())){

                                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                  list1.add(null);
                                                                  reader.next();
                                                              } else {
                                                            list1.add(TCountryCodeAndName.Factory.parse(reader));
                                                                }
                                                        }else{
                                                            loopDone1 = true;
                                                        }
                                                    }
                                                }
                                                // call the converter utility  to convert and set the array

                                                object.setTCountryCodeAndName((TCountryCodeAndName[])
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        TCountryCodeAndName.class,
                                                        list1));

                      }  // End of if for expected property start element

                            else {

                            }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ArrayOftCountryCodeAndNameGroupedByContinent bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ArrayOftCountryCodeAndNameGroupedByContinent
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = ArrayOftCountryCodeAndNameGroupedByContinent
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for TCountryCodeAndNameGroupedByContinent
                * This was an Array!
                */


                            protected TCountryCodeAndNameGroupedByContinent[] localTCountryCodeAndNameGroupedByContinent ;

                   /*  This tracker boolean wil be used to detect whether the user called the set method
                  *   for this attribute. It will be used to determine whether to include this field
                   *   in the serialized XML
                   */
                   protected boolean localTCountryCodeAndNameGroupedByContinentTracker = false ;

                   public boolean isTCountryCodeAndNameGroupedByContinentSpecified(){
                       return localTCountryCodeAndNameGroupedByContinentTracker;
                   }



                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCountryCodeAndNameGroupedByContinent[]
                   */
                   public  TCountryCodeAndNameGroupedByContinent[] getTCountryCodeAndNameGroupedByContinent(){
                       return localTCountryCodeAndNameGroupedByContinent;
                   }






                      /**
                       * validate the array for TCountryCodeAndNameGroupedByContinent
                       */
                      protected void validateTCountryCodeAndNameGroupedByContinent(TCountryCodeAndNameGroupedByContinent[] param){

                      }


                     /**
                      * Auto generated setter method
                      * @param param TCountryCodeAndNameGroupedByContinent
                      */
                      public void setTCountryCodeAndNameGroupedByContinent(TCountryCodeAndNameGroupedByContinent[] param){

                           validateTCountryCodeAndNameGroupedByContinent(param);

                       localTCountryCodeAndNameGroupedByContinentTracker = true;

                              this.localTCountryCodeAndNameGroupedByContinent=param;
                      }



                     /**
                     * Auto generated add method for the array for convenience
                     * @param param org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCountryCodeAndNameGroupedByContinent
                     */
                     public void addTCountryCodeAndNameGroupedByContinent(TCountryCodeAndNameGroupedByContinent param){
                           if (localTCountryCodeAndNameGroupedByContinent == null){
                           localTCountryCodeAndNameGroupedByContinent = new TCountryCodeAndNameGroupedByContinent[]{};
                           }


                         //update the setting tracker
                        localTCountryCodeAndNameGroupedByContinentTracker = true;


                       java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localTCountryCodeAndNameGroupedByContinent);
                       list.add(param);
                       this.localTCountryCodeAndNameGroupedByContinent =
                     (TCountryCodeAndNameGroupedByContinent[])list.toArray(
                    new TCountryCodeAndNameGroupedByContinent[list.size()]);

                     }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ArrayOftCountryCodeAndNameGroupedByContinent",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ArrayOftCountryCodeAndNameGroupedByContinent",
                   xmlWriter);
           }


           }
        if (localTCountryCodeAndNameGroupedByContinentTracker){
                               if (localTCountryCodeAndNameGroupedByContinent!=null){
                                    for (int i = 0;i < localTCountryCodeAndNameGroupedByContinent.length;i++){
                                        if (localTCountryCodeAndNameGroupedByContinent[i] != null){
                                         localTCountryCodeAndNameGroupedByContinent[i].serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryCodeAndNameGroupedByContinent"),
                                                   xmlWriter);
                                        } else {

                                                    writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCountryCodeAndNameGroupedByContinent", xmlWriter);

                                                   // write the nil attribute
                                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                   xmlWriter.writeEndElement();

                                        }

                                    }
                             } else {

                                        writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCountryCodeAndNameGroupedByContinent", xmlWriter);

                                       // write the nil attribute
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                       xmlWriter.writeEndElement();

                            }
                         }
            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();

         if (localTCountryCodeAndNameGroupedByContinentTracker){
                     if (localTCountryCodeAndNameGroupedByContinent!=null) {
                         for (int i = 0;i < localTCountryCodeAndNameGroupedByContinent.length;i++){

                            if (localTCountryCodeAndNameGroupedByContinent[i] != null){
                                 elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryCodeAndNameGroupedByContinent"));
                                 elementList.add(localTCountryCodeAndNameGroupedByContinent[i]);
                            } else {

                                        elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryCodeAndNameGroupedByContinent"));
                                        elementList.add(null);

                            }

                         }
                     } else {

                                elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryCodeAndNameGroupedByContinent"));
                                elementList.add(localTCountryCodeAndNameGroupedByContinent);

                     }

                }

        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ArrayOftCountryCodeAndNameGroupedByContinent parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ArrayOftCountryCodeAndNameGroupedByContinent object =
        new ArrayOftCountryCodeAndNameGroupedByContinent();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ArrayOftCountryCodeAndNameGroupedByContinent".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ArrayOftCountryCodeAndNameGroupedByContinent) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                java.util.ArrayList list1 = new java.util.ArrayList();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryCodeAndNameGroupedByContinent").equals(reader.getName())){



                            // Process the array and step past its final element's end.

                                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                      list1.add(null);
                                                      reader.next();
                                                  } else {
                                                list1.add(TCountryCodeAndNameGroupedByContinent.Factory.parse(reader));
                                                        }
                                                //loop until we find a start element that is not part of this array
                                                boolean loopDone1 = false;
                                                while(!loopDone1){
                                                    // We should be at the end element, but make sure
                                                    while (!reader.isEndElement())
                                                        reader.next();
                                                    // Step out of this element
                                                    reader.next();
                                                    // Step to next element event.
                                                    while (!reader.isStartElement() && !reader.isEndElement())
                                                        reader.next();
                                                    if (reader.isEndElement()){
                                                        //two continuous end elements means we are exiting the xml structure
                                                        loopDone1 = true;
                                                    } else {
                                                        if (new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryCodeAndNameGroupedByContinent").equals(reader.getName())){

                                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                  list1.add(null);
                                                                  reader.next();
                                                              } else {
                                                            list1.add(TCountryCodeAndNameGroupedByContinent.Factory.parse(reader));
                                                                }
                                                        }else{
                                                            loopDone1 = true;
                                                        }
                                                    }
                                                }
                                                // call the converter utility  to convert and set the array

                                                object.setTCountryCodeAndNameGroupedByContinent((TCountryCodeAndNameGroupedByContinent[])
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        TCountryCodeAndNameGroupedByContinent.class,
                                                        list1));

                      }  // End of if for expected property start element

                            else {

                            }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ArrayOftCountryInfo bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ArrayOftCountryInfo
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = ArrayOftCountryInfo
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for TCountryInfo
                * This was an Array!
                */


                            protected TCountryInfo[] localTCountryInfo ;

                   /*  This tracker boolean wil be used to detect whether the user called the set method
                  *   for this attribute. It will be used to determine whether to include this field
                   *   in the serialized XML
                   */
                   protected boolean localTCountryInfoTracker = false ;

                   public boolean isTCountryInfoSpecified(){
                       return localTCountryInfoTracker;
                   }



                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCountryInfo[]
                   */
                   public  TCountryInfo[] getTCountryInfo(){
                       return localTCountryInfo;
                   }






                      /**
                       * validate the array for TCountryInfo
                       */
                      protected void validateTCountryInfo(TCountryInfo[] param){

                      }


                     /**
                      * Auto generated setter method
                      * @param param TCountryInfo
                      */
                      public void setTCountryInfo(TCountryInfo[] param){

                           validateTCountryInfo(param);

                       localTCountryInfoTracker = true;

                              this.localTCountryInfo=param;
                      }



                     /**
                     * Auto generated add method for the array for convenience
                     * @param param org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCountryInfo
                     */
                     public void addTCountryInfo(TCountryInfo param){
                           if (localTCountryInfo == null){
                           localTCountryInfo = new TCountryInfo[]{};
                           }


                         //update the setting tracker
                        localTCountryInfoTracker = true;


                       java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localTCountryInfo);
                       list.add(param);
                       this.localTCountryInfo =
                     (TCountryInfo[])list.toArray(
                    new TCountryInfo[list.size()]);

                     }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ArrayOftCountryInfo",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ArrayOftCountryInfo",
                   xmlWriter);
           }


           }
        if (localTCountryInfoTracker){
                               if (localTCountryInfo!=null){
                                    for (int i = 0;i < localTCountryInfo.length;i++){
                                        if (localTCountryInfo[i] != null){
                                         localTCountryInfo[i].serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryInfo"),
                                                   xmlWriter);
                                        } else {

                                                    writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCountryInfo", xmlWriter);

                                                   // write the nil attribute
                                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                   xmlWriter.writeEndElement();

                                        }

                                    }
                             } else {

                                        writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCountryInfo", xmlWriter);

                                       // write the nil attribute
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                       xmlWriter.writeEndElement();

                            }
                         }
            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();

         if (localTCountryInfoTracker){
                     if (localTCountryInfo!=null) {
                         for (int i = 0;i < localTCountryInfo.length;i++){

                            if (localTCountryInfo[i] != null){
                                 elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryInfo"));
                                 elementList.add(localTCountryInfo[i]);
                            } else {

                                        elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryInfo"));
                                        elementList.add(null);

                            }

                         }
                     } else {

                                elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCountryInfo"));
                                elementList.add(localTCountryInfo);

                     }

                }

        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ArrayOftCountryInfo parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ArrayOftCountryInfo object =
        new ArrayOftCountryInfo();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ArrayOftCountryInfo".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ArrayOftCountryInfo) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                java.util.ArrayList list1 = new java.util.ArrayList();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryInfo").equals(reader.getName())){



                            // Process the array and step past its final element's end.

                                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                      list1.add(null);
                                                      reader.next();
                                                  } else {
                                                list1.add(TCountryInfo.Factory.parse(reader));
                                                        }
                                                //loop until we find a start element that is not part of this array
                                                boolean loopDone1 = false;
                                                while(!loopDone1){
                                                    // We should be at the end element, but make sure
                                                    while (!reader.isEndElement())
                                                        reader.next();
                                                    // Step out of this element
                                                    reader.next();
                                                    // Step to next element event.
                                                    while (!reader.isStartElement() && !reader.isEndElement())
                                                        reader.next();
                                                    if (reader.isEndElement()){
                                                        //two continuous end elements means we are exiting the xml structure
                                                        loopDone1 = true;
                                                    } else {
                                                        if (new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCountryInfo").equals(reader.getName())){

                                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                  list1.add(null);
                                                                  reader.next();
                                                              } else {
                                                            list1.add(TCountryInfo.Factory.parse(reader));
                                                                }
                                                        }else{
                                                            loopDone1 = true;
                                                        }
                                                    }
                                                }
                                                // call the converter utility  to convert and set the array

                                                object.setTCountryInfo((TCountryInfo[])
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        TCountryInfo.class,
                                                        list1));

                      }  // End of if for expected property start element

                            else {

                            }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ArrayOftCurrency bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ArrayOftCurrency
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = ArrayOftCurrency
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for TCurrency
                * This was an Array!
                */


                            protected TCurrency[] localTCurrency ;

                   /*  This tracker boolean wil be used to detect whether the user called the set method
                  *   for this attribute. It will be used to determine whether to include this field
                   *   in the serialized XML
                   */
                   protected boolean localTCurrencyTracker = false ;

                   public boolean isTCurrencySpecified(){
                       return localTCurrencyTracker;
                   }



                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCurrency[]
                   */
                   public  TCurrency[] getTCurrency(){
                       return localTCurrency;
                   }






                      /**
                       * validate the array for TCurrency
                       */
                      protected void validateTCurrency(TCurrency[] param){

                      }


                     /**
                      * Auto generated setter method
                      * @param param TCurrency
                      */
                      public void setTCurrency(TCurrency[] param){

                           validateTCurrency(param);

                       localTCurrencyTracker = true;

                              this.localTCurrency=param;
                      }



                     /**
                     * Auto generated add method for the array for convenience
                     * @param param org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCurrency
                     */
                     public void addTCurrency(TCurrency param){
                           if (localTCurrency == null){
                           localTCurrency = new TCurrency[]{};
                           }


                         //update the setting tracker
                        localTCurrencyTracker = true;


                       java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localTCurrency);
                       list.add(param);
                       this.localTCurrency =
                     (TCurrency[])list.toArray(
                    new TCurrency[list.size()]);

                     }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ArrayOftCurrency",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ArrayOftCurrency",
                   xmlWriter);
           }


           }
        if (localTCurrencyTracker){
                               if (localTCurrency!=null){
                                    for (int i = 0;i < localTCurrency.length;i++){
                                        if (localTCurrency[i] != null){
                                         localTCurrency[i].serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCurrency"),
                                                   xmlWriter);
                                        } else {

                                                    writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCurrency", xmlWriter);

                                                   // write the nil attribute
                                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                   xmlWriter.writeEndElement();

                                        }

                                    }
                             } else {

                                        writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tCurrency", xmlWriter);

                                       // write the nil attribute
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                       xmlWriter.writeEndElement();

                            }
                         }
            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();

         if (localTCurrencyTracker){
                     if (localTCurrency!=null) {
                         for (int i = 0;i < localTCurrency.length;i++){

                            if (localTCurrency[i] != null){
                                 elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCurrency"));
                                 elementList.add(localTCurrency[i]);
                            } else {

                                        elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCurrency"));
                                        elementList.add(null);

                            }

                         }
                     } else {

                                elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tCurrency"));
                                elementList.add(localTCurrency);

                     }

                }

        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ArrayOftCurrency parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ArrayOftCurrency object =
        new ArrayOftCurrency();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ArrayOftCurrency".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ArrayOftCurrency) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                java.util.ArrayList list1 = new java.util.ArrayList();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCurrency").equals(reader.getName())){



                            // Process the array and step past its final element's end.

                                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                      list1.add(null);
                                                      reader.next();
                                                  } else {
                                                list1.add(TCurrency.Factory.parse(reader));
                                                        }
                                                //loop until we find a start element that is not part of this array
                                                boolean loopDone1 = false;
                                                while(!loopDone1){
                                                    // We should be at the end element, but make sure
                                                    while (!reader.isEndElement())
                                                        reader.next();
                                                    // Step out of this element
                                                    reader.next();
                                                    // Step to next element event.
                                                    while (!reader.isStartElement() && !reader.isEndElement())
                                                        reader.next();
                                                    if (reader.isEndElement()){
                                                        //two continuous end elements means we are exiting the xml structure
                                                        loopDone1 = true;
                                                    } else {
                                                        if (new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tCurrency").equals(reader.getName())){

                                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                  list1.add(null);
                                                                  reader.next();
                                                              } else {
                                                            list1.add(TCurrency.Factory.parse(reader));
                                                                }
                                                        }else{
                                                            loopDone1 = true;
                                                        }
                                                    }
                                                }
                                                // call the converter utility  to convert and set the array

                                                object.setTCurrency((TCurrency[])
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        TCurrency.class,
                                                        list1));

                      }  // End of if for expected property start element

                            else {

                            }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ArrayOftLanguage bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ArrayOftLanguage
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = ArrayOftLanguage
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for TLanguage
                * This was an Array!
                */


                            protected TLanguage[] localTLanguage ;

                   /*  This tracker boolean wil be used to detect whether the user called the set method
                  *   for this attribute. It will be used to determine whether to include this field
                   *   in the serialized XML
                   */
                   protected boolean localTLanguageTracker = false ;

                   public boolean isTLanguageSpecified(){
                       return localTLanguageTracker;
                   }



                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TLanguage[]
                   */
                   public  TLanguage[] getTLanguage(){
                       return localTLanguage;
                   }






                      /**
                       * validate the array for TLanguage
                       */
                      protected void validateTLanguage(TLanguage[] param){

                      }


                     /**
                      * Auto generated setter method
                      * @param param TLanguage
                      */
                      public void setTLanguage(TLanguage[] param){

                           validateTLanguage(param);

                       localTLanguageTracker = true;

                              this.localTLanguage=param;
                      }



                     /**
                     * Auto generated add method for the array for convenience
                     * @param param org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TLanguage
                     */
                     public void addTLanguage(TLanguage param){
                           if (localTLanguage == null){
                           localTLanguage = new TLanguage[]{};
                           }


                         //update the setting tracker
                        localTLanguageTracker = true;


                       java.util.List list =
                    org.apache.axis2.databinding.utils.ConverterUtil.toList(localTLanguage);
                       list.add(param);
                       this.localTLanguage =
                     (TLanguage[])list.toArray(
                    new TLanguage[list.size()]);

                     }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ArrayOftLanguage",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ArrayOftLanguage",
                   xmlWriter);
           }


           }
        if (localTLanguageTracker){
                               if (localTLanguage!=null){
                                    for (int i = 0;i < localTLanguage.length;i++){
                                        if (localTLanguage[i] != null){
                                         localTLanguage[i].serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tLanguage"),
                                                   xmlWriter);
                                        } else {

                                                    writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tLanguage", xmlWriter);

                                                   // write the nil attribute
                                                   writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                                   xmlWriter.writeEndElement();

                                        }

                                    }
                             } else {

                                        writeStartElement(null, "http://www.oorsprong.org/websamples.countryinfo", "tLanguage", xmlWriter);

                                       // write the nil attribute
                                       writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","nil","1",xmlWriter);
                                       xmlWriter.writeEndElement();

                            }
                         }
            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();

         if (localTLanguageTracker){
                     if (localTLanguage!=null) {
                         for (int i = 0;i < localTLanguage.length;i++){

                            if (localTLanguage[i] != null){
                                 elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tLanguage"));
                                 elementList.add(localTLanguage[i]);
                            } else {

                                        elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tLanguage"));
                                        elementList.add(null);

                            }

                         }
                     } else {

                                elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                                  "tLanguage"));
                                elementList.add(localTLanguage);

                     }

                }

        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ArrayOftLanguage parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ArrayOftLanguage object =
        new ArrayOftLanguage();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ArrayOftLanguage".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ArrayOftLanguage) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                java.util.ArrayList list1 = new java.util.ArrayList();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tLanguage").equals(reader.getName())){



                            // Process the array and step past its final element's end.

                                                  nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                  if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                      list1.add(null);
                                                      reader.next();
                                                  } else {
                                                list1.add(TLanguage.Factory.parse(reader));
                                                        }
                                                //loop until we find a start element that is not part of this array
                                                boolean loopDone1 = false;
                                                while(!loopDone1){
                                                    // We should be at the end element, but make sure
                                                    while (!reader.isEndElement())
                                                        reader.next();
                                                    // Step out of this element
                                                    reader.next();
                                                    // Step to next element event.
                                                    while (!reader.isStartElement() && !reader.isEndElement())
                                                        reader.next();
                                                    if (reader.isEndElement()){
                                                        //two continuous end elements means we are exiting the xml structure
                                                        loopDone1 = true;
                                                    } else {
                                                        if (new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","tLanguage").equals(reader.getName())){

                                                              nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                                                              if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                                                  list1.add(null);
                                                                  reader.next();
                                                              } else {
                                                            list1.add(TLanguage.Factory.parse(reader));
                                                                }
                                                        }else{
                                                            loopDone1 = true;
                                                        }
                                                    }
                                                }
                                                // call the converter utility  to convert and set the array

                                                object.setTLanguage((TLanguage[])
                                                    org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                                        TLanguage.class,
                                                        list1));

                      }  // End of if for expected property start element

                            else {

                            }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CapitalCity bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CapitalCity
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CapitalCity",
        "");



                /**
                * field for SCountryISOCode
                */


                            protected String localSCountryISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryISOCode(){
                       return localSCountryISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryISOCode
                       */
                       public void setSCountryISOCode(String param){

                                    this.localSCountryISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CapitalCity",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CapitalCity",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryISOCode", xmlWriter);


                                  if (localSCountryISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryISOCode"));

                                if (localSCountryISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CapitalCity parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CapitalCity object =
        new CapitalCity();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CapitalCity".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CapitalCity) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CapitalCityResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CapitalCityResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CapitalCityResponse",
        "");



                /**
                * field for CapitalCityResult
                */


                            protected String localCapitalCityResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getCapitalCityResult(){
                       return localCapitalCityResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CapitalCityResult
                       */
                       public void setCapitalCityResult(String param){

                                    this.localCapitalCityResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CapitalCityResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CapitalCityResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "CapitalCityResult", xmlWriter);


                                  if (localCapitalCityResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("CapitalCityResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localCapitalCityResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CapitalCityResult"));

                                if (localCapitalCityResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCapitalCityResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("CapitalCityResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CapitalCityResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CapitalCityResponse object =
        new CapitalCityResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CapitalCityResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CapitalCityResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CapitalCityResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"CapitalCityResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setCapitalCityResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountriesUsingCurrency bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountriesUsingCurrency
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountriesUsingCurrency",
        "");



                /**
                * field for SISOCurrencyCode
                */


                            protected String localSISOCurrencyCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSISOCurrencyCode(){
                       return localSISOCurrencyCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SISOCurrencyCode
                       */
                       public void setSISOCurrencyCode(String param){

                                    this.localSISOCurrencyCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountriesUsingCurrency",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountriesUsingCurrency",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sISOCurrencyCode", xmlWriter);


                                  if (localSISOCurrencyCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sISOCurrencyCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSISOCurrencyCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sISOCurrencyCode"));

                                if (localSISOCurrencyCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSISOCurrencyCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sISOCurrencyCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountriesUsingCurrency parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountriesUsingCurrency object =
        new CountriesUsingCurrency();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountriesUsingCurrency".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountriesUsingCurrency) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sISOCurrencyCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sISOCurrencyCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSISOCurrencyCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountriesUsingCurrencyResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountriesUsingCurrencyResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountriesUsingCurrencyResponse",
        "");



                /**
                * field for CountriesUsingCurrencyResult
                */


                            protected ArrayOftCountryCodeAndName localCountriesUsingCurrencyResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCountryCodeAndName
                   */
                   public ArrayOftCountryCodeAndName getCountriesUsingCurrencyResult(){
                       return localCountriesUsingCurrencyResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CountriesUsingCurrencyResult
                       */
                       public void setCountriesUsingCurrencyResult(ArrayOftCountryCodeAndName param){

                                    this.localCountriesUsingCurrencyResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountriesUsingCurrencyResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountriesUsingCurrencyResponse",
                   xmlWriter);
           }


           }

                                    if (localCountriesUsingCurrencyResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("CountriesUsingCurrencyResult cannot be null!!");
                                    }
                                   localCountriesUsingCurrencyResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountriesUsingCurrencyResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CountriesUsingCurrencyResult"));


                            if (localCountriesUsingCurrencyResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("CountriesUsingCurrencyResult cannot be null!!");
                            }
                            elementList.add(localCountriesUsingCurrencyResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountriesUsingCurrencyResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountriesUsingCurrencyResponse object =
        new CountriesUsingCurrencyResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountriesUsingCurrencyResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountriesUsingCurrencyResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountriesUsingCurrencyResult").equals(reader.getName())){

                                        object.setCountriesUsingCurrencyResult(ArrayOftCountryCodeAndName.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryCurrency bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryCurrency
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryCurrency",
        "");



                /**
                * field for SCountryISOCode
                */


                            protected String localSCountryISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryISOCode(){
                       return localSCountryISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryISOCode
                       */
                       public void setSCountryISOCode(String param){

                                    this.localSCountryISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryCurrency",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryCurrency",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryISOCode", xmlWriter);


                                  if (localSCountryISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryISOCode"));

                                if (localSCountryISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryCurrency parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryCurrency object =
        new CountryCurrency();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryCurrency".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryCurrency) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryCurrencyResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryCurrencyResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryCurrencyResponse",
        "");



                /**
                * field for CountryCurrencyResult
                */


                            protected TCurrency localCountryCurrencyResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCurrency
                   */
                   public  TCurrency getCountryCurrencyResult(){
                       return localCountryCurrencyResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CountryCurrencyResult
                       */
                       public void setCountryCurrencyResult(TCurrency param){

                                    this.localCountryCurrencyResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryCurrencyResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryCurrencyResponse",
                   xmlWriter);
           }


           }

                                    if (localCountryCurrencyResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("CountryCurrencyResult cannot be null!!");
                                    }
                                   localCountryCurrencyResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryCurrencyResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CountryCurrencyResult"));


                            if (localCountryCurrencyResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("CountryCurrencyResult cannot be null!!");
                            }
                            elementList.add(localCountryCurrencyResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryCurrencyResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryCurrencyResponse object =
        new CountryCurrencyResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryCurrencyResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryCurrencyResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryCurrencyResult").equals(reader.getName())){

                                        object.setCountryCurrencyResult(TCurrency.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryFlag bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryFlag
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryFlag",
        "");



                /**
                * field for SCountryISOCode
                */


                            protected String localSCountryISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryISOCode(){
                       return localSCountryISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryISOCode
                       */
                       public void setSCountryISOCode(String param){

                                    this.localSCountryISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryFlag",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryFlag",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryISOCode", xmlWriter);


                                  if (localSCountryISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryISOCode"));

                                if (localSCountryISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryFlag parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryFlag object =
        new CountryFlag();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryFlag".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryFlag) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryFlagResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryFlagResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryFlagResponse",
        "");



                /**
                * field for CountryFlagResult
                */


                            protected String localCountryFlagResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getCountryFlagResult(){
                       return localCountryFlagResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CountryFlagResult
                       */
                       public void setCountryFlagResult(String param){

                                    this.localCountryFlagResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryFlagResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryFlagResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "CountryFlagResult", xmlWriter);


                                  if (localCountryFlagResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("CountryFlagResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localCountryFlagResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CountryFlagResult"));

                                if (localCountryFlagResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountryFlagResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("CountryFlagResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryFlagResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryFlagResponse object =
        new CountryFlagResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryFlagResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryFlagResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryFlagResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"CountryFlagResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setCountryFlagResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryIntPhoneCode bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryIntPhoneCode
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryIntPhoneCode",
        "");



                /**
                * field for SCountryISOCode
                */


                            protected String localSCountryISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryISOCode(){
                       return localSCountryISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryISOCode
                       */
                       public void setSCountryISOCode(String param){

                                    this.localSCountryISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryIntPhoneCode",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryIntPhoneCode",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryISOCode", xmlWriter);


                                  if (localSCountryISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryISOCode"));

                                if (localSCountryISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryIntPhoneCode parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryIntPhoneCode object =
        new CountryIntPhoneCode();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryIntPhoneCode".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryIntPhoneCode) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryIntPhoneCodeResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryIntPhoneCodeResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryIntPhoneCodeResponse",
        "");



                /**
                * field for CountryIntPhoneCodeResult
                */


                            protected String localCountryIntPhoneCodeResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getCountryIntPhoneCodeResult(){
                       return localCountryIntPhoneCodeResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CountryIntPhoneCodeResult
                       */
                       public void setCountryIntPhoneCodeResult(String param){

                                    this.localCountryIntPhoneCodeResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryIntPhoneCodeResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryIntPhoneCodeResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "CountryIntPhoneCodeResult", xmlWriter);


                                  if (localCountryIntPhoneCodeResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("CountryIntPhoneCodeResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localCountryIntPhoneCodeResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CountryIntPhoneCodeResult"));

                                if (localCountryIntPhoneCodeResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountryIntPhoneCodeResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("CountryIntPhoneCodeResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryIntPhoneCodeResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryIntPhoneCodeResponse object =
        new CountryIntPhoneCodeResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryIntPhoneCodeResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryIntPhoneCodeResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryIntPhoneCodeResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"CountryIntPhoneCodeResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setCountryIntPhoneCodeResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryISOCode bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryISOCode
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryISOCode",
        "");



                /**
                * field for SCountryName
                */


                            protected String localSCountryName ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryName(){
                       return localSCountryName;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryName
                       */
                       public void setSCountryName(String param){

                                    this.localSCountryName=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryISOCode",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryISOCode",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryName", xmlWriter);


                                  if (localSCountryName==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryName cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryName);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryName"));

                                if (localSCountryName != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryName));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryName cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryISOCode parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryISOCode object =
        new CountryISOCode();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryISOCode".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryISOCode) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryName").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryName" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryName(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryISOCodeResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryISOCodeResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryISOCodeResponse",
        "");



                /**
                * field for CountryISOCodeResult
                */


                            protected String localCountryISOCodeResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getCountryISOCodeResult(){
                       return localCountryISOCodeResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CountryISOCodeResult
                       */
                       public void setCountryISOCodeResult(String param){

                                    this.localCountryISOCodeResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryISOCodeResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryISOCodeResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "CountryISOCodeResult", xmlWriter);


                                  if (localCountryISOCodeResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("CountryISOCodeResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localCountryISOCodeResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CountryISOCodeResult"));

                                if (localCountryISOCodeResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountryISOCodeResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("CountryISOCodeResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryISOCodeResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryISOCodeResponse object =
        new CountryISOCodeResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryISOCodeResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryISOCodeResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryISOCodeResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"CountryISOCodeResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setCountryISOCodeResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryName
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryName",
        "");



                /**
                * field for SCountryISOCode
                */


                            protected String localSCountryISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryISOCode(){
                       return localSCountryISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryISOCode
                       */
                       public void setSCountryISOCode(String param){

                                    this.localSCountryISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryName",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryISOCode", xmlWriter);


                                  if (localSCountryISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryISOCode"));

                                if (localSCountryISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryName object =
        new CountryName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CountryNameResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CountryNameResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CountryNameResponse",
        "");



                /**
                * field for CountryNameResult
                */


                            protected String localCountryNameResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getCountryNameResult(){
                       return localCountryNameResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CountryNameResult
                       */
                       public void setCountryNameResult(String param){

                                    this.localCountryNameResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CountryNameResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CountryNameResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "CountryNameResult", xmlWriter);


                                  if (localCountryNameResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("CountryNameResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localCountryNameResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CountryNameResult"));

                                if (localCountryNameResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCountryNameResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("CountryNameResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CountryNameResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CountryNameResponse object =
        new CountryNameResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CountryNameResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CountryNameResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryNameResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"CountryNameResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setCountryNameResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CurrencyName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CurrencyName
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CurrencyName",
        "");



                /**
                * field for SCurrencyISOCode
                */


                            protected String localSCurrencyISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCurrencyISOCode(){
                       return localSCurrencyISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCurrencyISOCode
                       */
                       public void setSCurrencyISOCode(String param){

                                    this.localSCurrencyISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CurrencyName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CurrencyName",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCurrencyISOCode", xmlWriter);


                                  if (localSCurrencyISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCurrencyISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCurrencyISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCurrencyISOCode"));

                                if (localSCurrencyISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCurrencyISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCurrencyISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CurrencyName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CurrencyName object =
        new CurrencyName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CurrencyName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CurrencyName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCurrencyISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCurrencyISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCurrencyISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  CurrencyNameResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class CurrencyNameResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "CurrencyNameResponse",
        "");



                /**
                * field for CurrencyNameResult
                */


                            protected String localCurrencyNameResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getCurrencyNameResult(){
                       return localCurrencyNameResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CurrencyNameResult
                       */
                       public void setCurrencyNameResult(String param){

                                    this.localCurrencyNameResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":CurrencyNameResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "CurrencyNameResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "CurrencyNameResult", xmlWriter);


                                  if (localCurrencyNameResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("CurrencyNameResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localCurrencyNameResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CurrencyNameResult"));

                                if (localCurrencyNameResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localCurrencyNameResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("CurrencyNameResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static CurrencyNameResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    CurrencyNameResponse object =
        new CurrencyNameResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"CurrencyNameResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (CurrencyNameResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CurrencyNameResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"CurrencyNameResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setCurrencyNameResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ExtensionMapper class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ExtensionMapper{

  public static Object getTypeObject(String namespaceURI,
                                     String typeName,
                                     javax.xml.stream.XMLStreamReader reader) throws Exception{


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "tCountryInfo".equals(typeName)){

                    return  TCountryInfo.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "ArrayOftContinent".equals(typeName)){

                    return  ArrayOftContinent.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "tCountryCodeAndName".equals(typeName)){

                    return  TCountryCodeAndName.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "tLanguage".equals(typeName)){

                    return  TLanguage.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "ArrayOftCountryCodeAndName".equals(typeName)){

                    return  ArrayOftCountryCodeAndName.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "ArrayOftCountryCodeAndNameGroupedByContinent".equals(typeName)){

                    return  ArrayOftCountryCodeAndNameGroupedByContinent.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "tCountryCodeAndNameGroupedByContinent".equals(typeName)){

                    return  TCountryCodeAndNameGroupedByContinent.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "ArrayOftLanguage".equals(typeName)){

                    return  ArrayOftLanguage.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "ArrayOftCurrency".equals(typeName)){

                    return  ArrayOftCurrency.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "tCurrency".equals(typeName)){

                    return  TCurrency.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "tContinent".equals(typeName)){

                    return  TContinent.Factory.parse(reader);


          }


          if (
          "http://www.oorsprong.org/websamples.countryinfo".equals(namespaceURI) &&
          "ArrayOftCountryInfo".equals(typeName)){

                    return  ArrayOftCountryInfo.Factory.parse(reader);


          }


     throw new org.apache.axis2.databinding.ADBException("Unsupported type " + namespaceURI + " " + typeName);
  }

}

    /**
    *  FullCountryInfo bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class FullCountryInfo
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "FullCountryInfo",
        "");



                /**
                * field for SCountryISOCode
                */


                            protected String localSCountryISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryISOCode(){
                       return localSCountryISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryISOCode
                       */
                       public void setSCountryISOCode(String param){

                                    this.localSCountryISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":FullCountryInfo",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "FullCountryInfo",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryISOCode", xmlWriter);


                                  if (localSCountryISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryISOCode"));

                                if (localSCountryISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static FullCountryInfo parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    FullCountryInfo object =
        new FullCountryInfo();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"FullCountryInfo".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (FullCountryInfo) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  FullCountryInfoAllCountries bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class FullCountryInfoAllCountries
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "FullCountryInfoAllCountries",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":FullCountryInfoAllCountries",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "FullCountryInfoAllCountries",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static FullCountryInfoAllCountries parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    FullCountryInfoAllCountries object =
        new FullCountryInfoAllCountries();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"FullCountryInfoAllCountries".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (FullCountryInfoAllCountries) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  FullCountryInfoAllCountriesResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class FullCountryInfoAllCountriesResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "FullCountryInfoAllCountriesResponse",
        "");



                /**
                * field for FullCountryInfoAllCountriesResult
                */


                            protected ArrayOftCountryInfo localFullCountryInfoAllCountriesResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCountryInfo
                   */
                   public ArrayOftCountryInfo getFullCountryInfoAllCountriesResult(){
                       return localFullCountryInfoAllCountriesResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param FullCountryInfoAllCountriesResult
                       */
                       public void setFullCountryInfoAllCountriesResult(ArrayOftCountryInfo param){

                                    this.localFullCountryInfoAllCountriesResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":FullCountryInfoAllCountriesResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "FullCountryInfoAllCountriesResponse",
                   xmlWriter);
           }


           }

                                    if (localFullCountryInfoAllCountriesResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("FullCountryInfoAllCountriesResult cannot be null!!");
                                    }
                                   localFullCountryInfoAllCountriesResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","FullCountryInfoAllCountriesResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "FullCountryInfoAllCountriesResult"));


                            if (localFullCountryInfoAllCountriesResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("FullCountryInfoAllCountriesResult cannot be null!!");
                            }
                            elementList.add(localFullCountryInfoAllCountriesResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static FullCountryInfoAllCountriesResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    FullCountryInfoAllCountriesResponse object =
        new FullCountryInfoAllCountriesResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"FullCountryInfoAllCountriesResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (FullCountryInfoAllCountriesResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","FullCountryInfoAllCountriesResult").equals(reader.getName())){

                                        object.setFullCountryInfoAllCountriesResult(ArrayOftCountryInfo.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  FullCountryInfoResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class FullCountryInfoResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "FullCountryInfoResponse",
        "");



                /**
                * field for FullCountryInfoResult
                */


                            protected TCountryInfo localFullCountryInfoResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TCountryInfo
                   */
                   public  TCountryInfo getFullCountryInfoResult(){
                       return localFullCountryInfoResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param FullCountryInfoResult
                       */
                       public void setFullCountryInfoResult(TCountryInfo param){

                                    this.localFullCountryInfoResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":FullCountryInfoResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "FullCountryInfoResponse",
                   xmlWriter);
           }


           }

                                    if (localFullCountryInfoResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("FullCountryInfoResult cannot be null!!");
                                    }
                                   localFullCountryInfoResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","FullCountryInfoResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "FullCountryInfoResult"));


                            if (localFullCountryInfoResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("FullCountryInfoResult cannot be null!!");
                            }
                            elementList.add(localFullCountryInfoResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static FullCountryInfoResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    FullCountryInfoResponse object =
        new FullCountryInfoResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"FullCountryInfoResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (FullCountryInfoResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","FullCountryInfoResult").equals(reader.getName())){

                                        object.setFullCountryInfoResult(TCountryInfo.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  LanguageISOCode bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class LanguageISOCode
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "LanguageISOCode",
        "");



                /**
                * field for SLanguageName
                */


                            protected String localSLanguageName ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSLanguageName(){
                       return localSLanguageName;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SLanguageName
                       */
                       public void setSLanguageName(String param){

                                    this.localSLanguageName=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":LanguageISOCode",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "LanguageISOCode",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sLanguageName", xmlWriter);


                                  if (localSLanguageName==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sLanguageName cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSLanguageName);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sLanguageName"));

                                if (localSLanguageName != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSLanguageName));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sLanguageName cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LanguageISOCode parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    LanguageISOCode object =
        new LanguageISOCode();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"LanguageISOCode".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (LanguageISOCode) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sLanguageName").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sLanguageName" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSLanguageName(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  LanguageISOCodeResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class LanguageISOCodeResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "LanguageISOCodeResponse",
        "");



                /**
                * field for LanguageISOCodeResult
                */


                            protected String localLanguageISOCodeResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getLanguageISOCodeResult(){
                       return localLanguageISOCodeResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param LanguageISOCodeResult
                       */
                       public void setLanguageISOCodeResult(String param){

                                    this.localLanguageISOCodeResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":LanguageISOCodeResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "LanguageISOCodeResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "LanguageISOCodeResult", xmlWriter);


                                  if (localLanguageISOCodeResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("LanguageISOCodeResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localLanguageISOCodeResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "LanguageISOCodeResult"));

                                if (localLanguageISOCodeResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLanguageISOCodeResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("LanguageISOCodeResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LanguageISOCodeResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    LanguageISOCodeResponse object =
        new LanguageISOCodeResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"LanguageISOCodeResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (LanguageISOCodeResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","LanguageISOCodeResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"LanguageISOCodeResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setLanguageISOCodeResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  LanguageName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class LanguageName
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "LanguageName",
        "");



                /**
                * field for SISOCode
                */


                            protected String localSISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSISOCode(){
                       return localSISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SISOCode
                       */
                       public void setSISOCode(String param){

                                    this.localSISOCode=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":LanguageName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "LanguageName",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sISOCode", xmlWriter);


                                  if (localSISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSISOCode);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sISOCode"));

                                if (localSISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LanguageName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    LanguageName object =
        new LanguageName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"LanguageName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (LanguageName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  LanguageNameResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class LanguageNameResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "LanguageNameResponse",
        "");



                /**
                * field for LanguageNameResult
                */


                            protected String localLanguageNameResult ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getLanguageNameResult(){
                       return localLanguageNameResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param LanguageNameResult
                       */
                       public void setLanguageNameResult(String param){

                                    this.localLanguageNameResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":LanguageNameResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "LanguageNameResponse",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "LanguageNameResult", xmlWriter);


                                  if (localLanguageNameResult==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("LanguageNameResult cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localLanguageNameResult);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "LanguageNameResult"));

                                if (localLanguageNameResult != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localLanguageNameResult));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("LanguageNameResult cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static LanguageNameResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    LanguageNameResponse object =
        new LanguageNameResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"LanguageNameResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (LanguageNameResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","LanguageNameResult").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"LanguageNameResult" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setLanguageNameResult(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfContinentsByCode bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfContinentsByCode
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfContinentsByCode",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfContinentsByCode",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfContinentsByCode",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfContinentsByCode parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfContinentsByCode object =
        new ListOfContinentsByCode();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfContinentsByCode".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfContinentsByCode) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfContinentsByCodeResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfContinentsByCodeResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfContinentsByCodeResponse",
        "");



                /**
                * field for ListOfContinentsByCodeResult
                */


                            protected ArrayOftContinent localListOfContinentsByCodeResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftContinent
                   */
                   public ArrayOftContinent getListOfContinentsByCodeResult(){
                       return localListOfContinentsByCodeResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfContinentsByCodeResult
                       */
                       public void setListOfContinentsByCodeResult(ArrayOftContinent param){

                                    this.localListOfContinentsByCodeResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfContinentsByCodeResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfContinentsByCodeResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfContinentsByCodeResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfContinentsByCodeResult cannot be null!!");
                                    }
                                   localListOfContinentsByCodeResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfContinentsByCodeResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfContinentsByCodeResult"));


                            if (localListOfContinentsByCodeResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfContinentsByCodeResult cannot be null!!");
                            }
                            elementList.add(localListOfContinentsByCodeResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfContinentsByCodeResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfContinentsByCodeResponse object =
        new ListOfContinentsByCodeResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfContinentsByCodeResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfContinentsByCodeResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfContinentsByCodeResult").equals(reader.getName())){

                                        object.setListOfContinentsByCodeResult(ArrayOftContinent.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfContinentsByName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfContinentsByName
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfContinentsByName",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfContinentsByName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfContinentsByName",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfContinentsByName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfContinentsByName object =
        new ListOfContinentsByName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfContinentsByName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfContinentsByName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfContinentsByNameResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfContinentsByNameResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfContinentsByNameResponse",
        "");



                /**
                * field for ListOfContinentsByNameResult
                */


                            protected ArrayOftContinent localListOfContinentsByNameResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftContinent
                   */
                   public ArrayOftContinent getListOfContinentsByNameResult(){
                       return localListOfContinentsByNameResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfContinentsByNameResult
                       */
                       public void setListOfContinentsByNameResult(ArrayOftContinent param){

                                    this.localListOfContinentsByNameResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfContinentsByNameResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfContinentsByNameResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfContinentsByNameResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfContinentsByNameResult cannot be null!!");
                                    }
                                   localListOfContinentsByNameResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfContinentsByNameResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfContinentsByNameResult"));


                            if (localListOfContinentsByNameResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfContinentsByNameResult cannot be null!!");
                            }
                            elementList.add(localListOfContinentsByNameResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfContinentsByNameResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfContinentsByNameResponse object =
        new ListOfContinentsByNameResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfContinentsByNameResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfContinentsByNameResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfContinentsByNameResult").equals(reader.getName())){

                                        object.setListOfContinentsByNameResult(ArrayOftContinent.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCountryNamesByCode bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCountryNamesByCode
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCountryNamesByCode",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCountryNamesByCode",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCountryNamesByCode",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCountryNamesByCode parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCountryNamesByCode object =
        new ListOfCountryNamesByCode();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCountryNamesByCode".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCountryNamesByCode) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCountryNamesByCodeResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCountryNamesByCodeResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCountryNamesByCodeResponse",
        "");



                /**
                * field for ListOfCountryNamesByCodeResult
                */


                            protected ArrayOftCountryCodeAndName localListOfCountryNamesByCodeResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCountryCodeAndName
                   */
                   public ArrayOftCountryCodeAndName getListOfCountryNamesByCodeResult(){
                       return localListOfCountryNamesByCodeResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfCountryNamesByCodeResult
                       */
                       public void setListOfCountryNamesByCodeResult(ArrayOftCountryCodeAndName param){

                                    this.localListOfCountryNamesByCodeResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCountryNamesByCodeResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCountryNamesByCodeResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfCountryNamesByCodeResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfCountryNamesByCodeResult cannot be null!!");
                                    }
                                   localListOfCountryNamesByCodeResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCountryNamesByCodeResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfCountryNamesByCodeResult"));


                            if (localListOfCountryNamesByCodeResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfCountryNamesByCodeResult cannot be null!!");
                            }
                            elementList.add(localListOfCountryNamesByCodeResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCountryNamesByCodeResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCountryNamesByCodeResponse object =
        new ListOfCountryNamesByCodeResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCountryNamesByCodeResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCountryNamesByCodeResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCountryNamesByCodeResult").equals(reader.getName())){

                                        object.setListOfCountryNamesByCodeResult(ArrayOftCountryCodeAndName.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCountryNamesByName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCountryNamesByName
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCountryNamesByName",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCountryNamesByName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCountryNamesByName",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCountryNamesByName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCountryNamesByName object =
        new ListOfCountryNamesByName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCountryNamesByName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCountryNamesByName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCountryNamesByNameResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCountryNamesByNameResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCountryNamesByNameResponse",
        "");



                /**
                * field for ListOfCountryNamesByNameResult
                */


                            protected ArrayOftCountryCodeAndName localListOfCountryNamesByNameResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCountryCodeAndName
                   */
                   public ArrayOftCountryCodeAndName getListOfCountryNamesByNameResult(){
                       return localListOfCountryNamesByNameResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfCountryNamesByNameResult
                       */
                       public void setListOfCountryNamesByNameResult(ArrayOftCountryCodeAndName param){

                                    this.localListOfCountryNamesByNameResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCountryNamesByNameResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCountryNamesByNameResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfCountryNamesByNameResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfCountryNamesByNameResult cannot be null!!");
                                    }
                                   localListOfCountryNamesByNameResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCountryNamesByNameResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfCountryNamesByNameResult"));


                            if (localListOfCountryNamesByNameResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfCountryNamesByNameResult cannot be null!!");
                            }
                            elementList.add(localListOfCountryNamesByNameResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCountryNamesByNameResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCountryNamesByNameResponse object =
        new ListOfCountryNamesByNameResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCountryNamesByNameResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCountryNamesByNameResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCountryNamesByNameResult").equals(reader.getName())){

                                        object.setListOfCountryNamesByNameResult(ArrayOftCountryCodeAndName.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCountryNamesGroupedByContinent bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCountryNamesGroupedByContinent
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCountryNamesGroupedByContinent",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCountryNamesGroupedByContinent",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCountryNamesGroupedByContinent",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCountryNamesGroupedByContinent parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCountryNamesGroupedByContinent object =
        new ListOfCountryNamesGroupedByContinent();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCountryNamesGroupedByContinent".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCountryNamesGroupedByContinent) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCountryNamesGroupedByContinentResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCountryNamesGroupedByContinentResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCountryNamesGroupedByContinentResponse",
        "");



                /**
                * field for ListOfCountryNamesGroupedByContinentResult
                */


                            protected ArrayOftCountryCodeAndNameGroupedByContinent localListOfCountryNamesGroupedByContinentResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCountryCodeAndNameGroupedByContinent
                   */
                   public ArrayOftCountryCodeAndNameGroupedByContinent getListOfCountryNamesGroupedByContinentResult(){
                       return localListOfCountryNamesGroupedByContinentResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfCountryNamesGroupedByContinentResult
                       */
                       public void setListOfCountryNamesGroupedByContinentResult(ArrayOftCountryCodeAndNameGroupedByContinent param){

                                    this.localListOfCountryNamesGroupedByContinentResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCountryNamesGroupedByContinentResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCountryNamesGroupedByContinentResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfCountryNamesGroupedByContinentResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfCountryNamesGroupedByContinentResult cannot be null!!");
                                    }
                                   localListOfCountryNamesGroupedByContinentResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCountryNamesGroupedByContinentResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfCountryNamesGroupedByContinentResult"));


                            if (localListOfCountryNamesGroupedByContinentResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfCountryNamesGroupedByContinentResult cannot be null!!");
                            }
                            elementList.add(localListOfCountryNamesGroupedByContinentResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCountryNamesGroupedByContinentResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCountryNamesGroupedByContinentResponse object =
        new ListOfCountryNamesGroupedByContinentResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCountryNamesGroupedByContinentResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCountryNamesGroupedByContinentResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCountryNamesGroupedByContinentResult").equals(reader.getName())){

                                        object.setListOfCountryNamesGroupedByContinentResult(ArrayOftCountryCodeAndNameGroupedByContinent.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCurrenciesByCode bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCurrenciesByCode
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCurrenciesByCode",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCurrenciesByCode",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCurrenciesByCode",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCurrenciesByCode parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCurrenciesByCode object =
        new ListOfCurrenciesByCode();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCurrenciesByCode".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCurrenciesByCode) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCurrenciesByCodeResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCurrenciesByCodeResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCurrenciesByCodeResponse",
        "");



                /**
                * field for ListOfCurrenciesByCodeResult
                */


                            protected ArrayOftCurrency localListOfCurrenciesByCodeResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCurrency
                   */
                   public ArrayOftCurrency getListOfCurrenciesByCodeResult(){
                       return localListOfCurrenciesByCodeResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfCurrenciesByCodeResult
                       */
                       public void setListOfCurrenciesByCodeResult(ArrayOftCurrency param){

                                    this.localListOfCurrenciesByCodeResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCurrenciesByCodeResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCurrenciesByCodeResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfCurrenciesByCodeResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfCurrenciesByCodeResult cannot be null!!");
                                    }
                                   localListOfCurrenciesByCodeResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCurrenciesByCodeResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfCurrenciesByCodeResult"));


                            if (localListOfCurrenciesByCodeResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfCurrenciesByCodeResult cannot be null!!");
                            }
                            elementList.add(localListOfCurrenciesByCodeResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCurrenciesByCodeResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCurrenciesByCodeResponse object =
        new ListOfCurrenciesByCodeResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCurrenciesByCodeResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCurrenciesByCodeResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCurrenciesByCodeResult").equals(reader.getName())){

                                        object.setListOfCurrenciesByCodeResult(ArrayOftCurrency.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCurrenciesByName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCurrenciesByName
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCurrenciesByName",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCurrenciesByName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCurrenciesByName",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCurrenciesByName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCurrenciesByName object =
        new ListOfCurrenciesByName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCurrenciesByName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCurrenciesByName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfCurrenciesByNameResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfCurrenciesByNameResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfCurrenciesByNameResponse",
        "");



                /**
                * field for ListOfCurrenciesByNameResult
                */


                            protected ArrayOftCurrency localListOfCurrenciesByNameResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCurrency
                   */
                   public ArrayOftCurrency getListOfCurrenciesByNameResult(){
                       return localListOfCurrenciesByNameResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfCurrenciesByNameResult
                       */
                       public void setListOfCurrenciesByNameResult(ArrayOftCurrency param){

                                    this.localListOfCurrenciesByNameResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfCurrenciesByNameResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfCurrenciesByNameResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfCurrenciesByNameResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfCurrenciesByNameResult cannot be null!!");
                                    }
                                   localListOfCurrenciesByNameResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCurrenciesByNameResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfCurrenciesByNameResult"));


                            if (localListOfCurrenciesByNameResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfCurrenciesByNameResult cannot be null!!");
                            }
                            elementList.add(localListOfCurrenciesByNameResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfCurrenciesByNameResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfCurrenciesByNameResponse object =
        new ListOfCurrenciesByNameResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfCurrenciesByNameResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfCurrenciesByNameResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfCurrenciesByNameResult").equals(reader.getName())){

                                        object.setListOfCurrenciesByNameResult(ArrayOftCurrency.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfLanguagesByCode bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfLanguagesByCode
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfLanguagesByCode",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfLanguagesByCode",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfLanguagesByCode",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfLanguagesByCode parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfLanguagesByCode object =
        new ListOfLanguagesByCode();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfLanguagesByCode".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfLanguagesByCode) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfLanguagesByCodeResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfLanguagesByCodeResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfLanguagesByCodeResponse",
        "");



                /**
                * field for ListOfLanguagesByCodeResult
                */


                            protected ArrayOftLanguage localListOfLanguagesByCodeResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftLanguage
                   */
                   public ArrayOftLanguage getListOfLanguagesByCodeResult(){
                       return localListOfLanguagesByCodeResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfLanguagesByCodeResult
                       */
                       public void setListOfLanguagesByCodeResult(ArrayOftLanguage param){

                                    this.localListOfLanguagesByCodeResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfLanguagesByCodeResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfLanguagesByCodeResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfLanguagesByCodeResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfLanguagesByCodeResult cannot be null!!");
                                    }
                                   localListOfLanguagesByCodeResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfLanguagesByCodeResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfLanguagesByCodeResult"));


                            if (localListOfLanguagesByCodeResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfLanguagesByCodeResult cannot be null!!");
                            }
                            elementList.add(localListOfLanguagesByCodeResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfLanguagesByCodeResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfLanguagesByCodeResponse object =
        new ListOfLanguagesByCodeResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfLanguagesByCodeResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfLanguagesByCodeResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfLanguagesByCodeResult").equals(reader.getName())){

                                        object.setListOfLanguagesByCodeResult(ArrayOftLanguage.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfLanguagesByName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfLanguagesByName
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfLanguagesByName",
        "");





/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfLanguagesByName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfLanguagesByName",
                   xmlWriter);
           }


           }

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();



        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfLanguagesByName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfLanguagesByName object =
        new ListOfLanguagesByName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfLanguagesByName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfLanguagesByName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  ListOfLanguagesByNameResponse bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class ListOfLanguagesByNameResponse
implements org.apache.axis2.databinding.ADBBean{

        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName(
        "http://www.oorsprong.org/websamples.countryinfo",
        "ListOfLanguagesByNameResponse",
        "");



                /**
                * field for ListOfLanguagesByNameResult
                */


                            protected ArrayOftLanguage localListOfLanguagesByNameResult ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftLanguage
                   */
                   public ArrayOftLanguage getListOfLanguagesByNameResult(){
                       return localListOfLanguagesByNameResult;
                   }



                    /**
                       * Auto generated setter method
                       * @param param ListOfLanguagesByNameResult
                       */
                       public void setListOfLanguagesByNameResult(ArrayOftLanguage param){

                                    this.localListOfLanguagesByNameResult=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,MY_QNAME);
       return factory.createOMElement(dataSource,MY_QNAME);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":ListOfLanguagesByNameResponse",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "ListOfLanguagesByNameResponse",
                   xmlWriter);
           }


           }

                                    if (localListOfLanguagesByNameResult==null){
                                         throw new org.apache.axis2.databinding.ADBException("ListOfLanguagesByNameResult cannot be null!!");
                                    }
                                   localListOfLanguagesByNameResult.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfLanguagesByNameResult"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "ListOfLanguagesByNameResult"));


                            if (localListOfLanguagesByNameResult==null){
                                 throw new org.apache.axis2.databinding.ADBException("ListOfLanguagesByNameResult cannot be null!!");
                            }
                            elementList.add(localListOfLanguagesByNameResult);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static ListOfLanguagesByNameResponse parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    ListOfLanguagesByNameResponse object =
        new ListOfLanguagesByNameResponse();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"ListOfLanguagesByNameResponse".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (ListOfLanguagesByNameResponse) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","ListOfLanguagesByNameResult").equals(reader.getName())){

                                        object.setListOfLanguagesByNameResult(ArrayOftLanguage.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  TContinent bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class TContinent
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = tContinent
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for SCode
                */


                            protected String localSCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCode(){
                       return localSCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCode
                       */
                       public void setSCode(String param){

                                    this.localSCode=param;


                       }


                /**
                * field for SName
                */


                            protected String localSName ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSName(){
                       return localSName;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SName
                       */
                       public void setSName(String param){

                                    this.localSName=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":tContinent",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "tContinent",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCode", xmlWriter);


                                  if (localSCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sName", xmlWriter);


                                  if (localSName==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSName);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCode"));

                                if (localSCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sName"));

                                if (localSName != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSName));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TContinent parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    TContinent object =
        new TContinent();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"tContinent".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (TContinent) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sName").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sName" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSName(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  TCountryCodeAndName bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class TCountryCodeAndName
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = tCountryCodeAndName
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for SISOCode
                */


                            protected String localSISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSISOCode(){
                       return localSISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SISOCode
                       */
                       public void setSISOCode(String param){

                                    this.localSISOCode=param;


                       }


                /**
                * field for SName
                */


                            protected String localSName ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSName(){
                       return localSName;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SName
                       */
                       public void setSName(String param){

                                    this.localSName=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":tCountryCodeAndName",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "tCountryCodeAndName",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sISOCode", xmlWriter);


                                  if (localSISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSISOCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sName", xmlWriter);


                                  if (localSName==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSName);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sISOCode"));

                                if (localSISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sName"));

                                if (localSName != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSName));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TCountryCodeAndName parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    TCountryCodeAndName object =
        new TCountryCodeAndName();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"tCountryCodeAndName".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (TCountryCodeAndName) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sName").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sName" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSName(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  TCountryCodeAndNameGroupedByContinent bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class TCountryCodeAndNameGroupedByContinent
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = tCountryCodeAndNameGroupedByContinent
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for Continent
                */


                            protected TContinent localContinent ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.TContinent
                   */
                   public TContinent getContinent(){
                       return localContinent;
                   }



                    /**
                       * Auto generated setter method
                       * @param param Continent
                       */
                       public void setContinent(TContinent param){

                                    this.localContinent=param;


                       }


                /**
                * field for CountryCodeAndNames
                */


                            protected ArrayOftCountryCodeAndName localCountryCodeAndNames ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftCountryCodeAndName
                   */
                   public ArrayOftCountryCodeAndName getCountryCodeAndNames(){
                       return localCountryCodeAndNames;
                   }



                    /**
                       * Auto generated setter method
                       * @param param CountryCodeAndNames
                       */
                       public void setCountryCodeAndNames(ArrayOftCountryCodeAndName param){

                                    this.localCountryCodeAndNames=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":tCountryCodeAndNameGroupedByContinent",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "tCountryCodeAndNameGroupedByContinent",
                   xmlWriter);
           }


           }

                                    if (localContinent==null){
                                         throw new org.apache.axis2.databinding.ADBException("Continent cannot be null!!");
                                    }
                                   localContinent.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","Continent"),
                                       xmlWriter);

                                    if (localCountryCodeAndNames==null){
                                         throw new org.apache.axis2.databinding.ADBException("CountryCodeAndNames cannot be null!!");
                                    }
                                   localCountryCodeAndNames.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryCodeAndNames"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "Continent"));


                            if (localContinent==null){
                                 throw new org.apache.axis2.databinding.ADBException("Continent cannot be null!!");
                            }
                            elementList.add(localContinent);

                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "CountryCodeAndNames"));


                            if (localCountryCodeAndNames==null){
                                 throw new org.apache.axis2.databinding.ADBException("CountryCodeAndNames cannot be null!!");
                            }
                            elementList.add(localCountryCodeAndNames);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TCountryCodeAndNameGroupedByContinent parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    TCountryCodeAndNameGroupedByContinent object =
        new TCountryCodeAndNameGroupedByContinent();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"tCountryCodeAndNameGroupedByContinent".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (TCountryCodeAndNameGroupedByContinent) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","Continent").equals(reader.getName())){

                                        object.setContinent(TContinent.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","CountryCodeAndNames").equals(reader.getName())){

                                        object.setCountryCodeAndNames(ArrayOftCountryCodeAndName.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  TCountryInfo bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class TCountryInfo
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = tCountryInfo
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for SISOCode
                */


                            protected String localSISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSISOCode(){
                       return localSISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SISOCode
                       */
                       public void setSISOCode(String param){

                                    this.localSISOCode=param;


                       }


                /**
                * field for SName
                */


                            protected String localSName ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSName(){
                       return localSName;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SName
                       */
                       public void setSName(String param){

                                    this.localSName=param;


                       }


                /**
                * field for SCapitalCity
                */


                            protected String localSCapitalCity ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCapitalCity(){
                       return localSCapitalCity;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCapitalCity
                       */
                       public void setSCapitalCity(String param){

                                    this.localSCapitalCity=param;


                       }


                /**
                * field for SPhoneCode
                */


                            protected String localSPhoneCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSPhoneCode(){
                       return localSPhoneCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SPhoneCode
                       */
                       public void setSPhoneCode(String param){

                                    this.localSPhoneCode=param;


                       }


                /**
                * field for SContinentCode
                */


                            protected String localSContinentCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSContinentCode(){
                       return localSContinentCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SContinentCode
                       */
                       public void setSContinentCode(String param){

                                    this.localSContinentCode=param;


                       }


                /**
                * field for SCurrencyISOCode
                */


                            protected String localSCurrencyISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCurrencyISOCode(){
                       return localSCurrencyISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCurrencyISOCode
                       */
                       public void setSCurrencyISOCode(String param){

                                    this.localSCurrencyISOCode=param;


                       }


                /**
                * field for SCountryFlag
                */


                            protected String localSCountryFlag ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSCountryFlag(){
                       return localSCountryFlag;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SCountryFlag
                       */
                       public void setSCountryFlag(String param){

                                    this.localSCountryFlag=param;


                       }


                /**
                * field for Languages
                */


                            protected ArrayOftLanguage localLanguages ;


                   /**
                   * Auto generated getter method
                   * @return org.oorsprong.websamples_countryinfo.CountryInfoServiceStub.ArrayOftLanguage
                   */
                   public ArrayOftLanguage getLanguages(){
                       return localLanguages;
                   }



                    /**
                       * Auto generated setter method
                       * @param param Languages
                       */
                       public void setLanguages(ArrayOftLanguage param){

                                    this.localLanguages=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":tCountryInfo",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "tCountryInfo",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sISOCode", xmlWriter);


                                  if (localSISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSISOCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sName", xmlWriter);


                                  if (localSName==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSName);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCapitalCity", xmlWriter);


                                  if (localSCapitalCity==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCapitalCity cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCapitalCity);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sPhoneCode", xmlWriter);


                                  if (localSPhoneCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sPhoneCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSPhoneCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sContinentCode", xmlWriter);


                                  if (localSContinentCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sContinentCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSContinentCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCurrencyISOCode", xmlWriter);


                                  if (localSCurrencyISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCurrencyISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCurrencyISOCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sCountryFlag", xmlWriter);


                                  if (localSCountryFlag==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sCountryFlag cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSCountryFlag);

                                  }

                           xmlWriter.writeEndElement();

                                    if (localLanguages==null){
                                         throw new org.apache.axis2.databinding.ADBException("Languages cannot be null!!");
                                    }
                                   localLanguages.serialize(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","Languages"),
                                       xmlWriter);

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sISOCode"));

                                if (localSISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sName"));

                                if (localSName != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSName));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCapitalCity"));

                                if (localSCapitalCity != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCapitalCity));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCapitalCity cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sPhoneCode"));

                                if (localSPhoneCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSPhoneCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sPhoneCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sContinentCode"));

                                if (localSContinentCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSContinentCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sContinentCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCurrencyISOCode"));

                                if (localSCurrencyISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCurrencyISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCurrencyISOCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sCountryFlag"));

                                if (localSCountryFlag != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSCountryFlag));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sCountryFlag cannot be null!!");
                                }

                    elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "Languages"));


                            if (localLanguages==null){
                                 throw new org.apache.axis2.databinding.ADBException("Languages cannot be null!!");
                            }
                            elementList.add(localLanguages);


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TCountryInfo parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    TCountryInfo object =
        new TCountryInfo();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"tCountryInfo".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (TCountryInfo) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sName").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sName" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSName(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCapitalCity").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCapitalCity" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCapitalCity(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sPhoneCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sPhoneCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSPhoneCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sContinentCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sContinentCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSContinentCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCurrencyISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCurrencyISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCurrencyISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sCountryFlag").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sCountryFlag" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSCountryFlag(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","Languages").equals(reader.getName())){

                                        object.setLanguages(ArrayOftLanguage.Factory.parse(reader));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  TCurrency bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class TCurrency
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = tCurrency
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for SISOCode
                */


                            protected String localSISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSISOCode(){
                       return localSISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SISOCode
                       */
                       public void setSISOCode(String param){

                                    this.localSISOCode=param;


                       }


                /**
                * field for SName
                */


                            protected String localSName ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSName(){
                       return localSName;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SName
                       */
                       public void setSName(String param){

                                    this.localSName=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":tCurrency",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "tCurrency",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sISOCode", xmlWriter);


                                  if (localSISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSISOCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sName", xmlWriter);


                                  if (localSName==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSName);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sISOCode"));

                                if (localSISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sName"));

                                if (localSName != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSName));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TCurrency parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    TCurrency object =
        new TCurrency();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"tCurrency".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (TCurrency) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sName").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sName" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSName(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}

    /**
    *  TLanguage bean class
    */
    @SuppressWarnings({"unchecked","unused"})

public static class TLanguage
implements org.apache.axis2.databinding.ADBBean{
/* This type was generated from the piece of schema that had
        name = tLanguage
        Namespace URI = http://www.oorsprong.org/websamples.countryinfo
        Namespace Prefix =
        */


                /**
                * field for SISOCode
                */


                            protected String localSISOCode ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSISOCode(){
                       return localSISOCode;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SISOCode
                       */
                       public void setSISOCode(String param){

                                    this.localSISOCode=param;


                       }


                /**
                * field for SName
                */


                            protected String localSName ;


                   /**
                   * Auto generated getter method
                   * @return java.lang.String
                   */
                   public  String getSName(){
                       return localSName;
                   }



                    /**
                       * Auto generated setter method
                       * @param param SName
                       */
                       public void setSName(String param){

                                    this.localSName=param;


                       }




/**
*
* @param parentQName
* @param factory
* @return org.apache.axiom.om.OMElement
*/
public org.apache.axiom.om.OMElement getOMElement (
       final javax.xml.namespace.QName parentQName,
       final org.apache.axiom.om.OMFactory factory) throws org.apache.axis2.databinding.ADBException{



       org.apache.axiom.om.OMDataSource dataSource =
               new org.apache.axis2.databinding.ADBDataSource(this,parentQName);
       return factory.createOMElement(dataSource,parentQName);

}

 public void serialize(final javax.xml.namespace.QName parentQName,
                               javax.xml.stream.XMLStreamWriter xmlWriter)
                        throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{
                   serialize(parentQName,xmlWriter,false);
 }

 public void serialize(final javax.xml.namespace.QName parentQName,
                       javax.xml.stream.XMLStreamWriter xmlWriter,
                       boolean serializeType)
    throws javax.xml.stream.XMLStreamException, org.apache.axis2.databinding.ADBException{




        String prefix = null;
        String namespace = null;


            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(), xmlWriter);

          if (serializeType){


           String namespacePrefix = registerPrefix(xmlWriter,"http://www.oorsprong.org/websamples.countryinfo");
           if ((namespacePrefix != null) && (namespacePrefix.trim().length() > 0)){
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   namespacePrefix+":tLanguage",
                   xmlWriter);
           } else {
               writeAttribute("xsi","http://www.w3.org/2001/XMLSchema-instance","type",
                   "tLanguage",
                   xmlWriter);
           }


           }

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sISOCode", xmlWriter);


                                  if (localSISOCode==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSISOCode);

                                  }

                           xmlWriter.writeEndElement();

                            namespace = "http://www.oorsprong.org/websamples.countryinfo";
                            writeStartElement(null, namespace, "sName", xmlWriter);


                                  if (localSName==null){
                                      // write the nil attribute

                                             throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");

                                  }else{


                                           xmlWriter.writeCharacters(localSName);

                                  }

                           xmlWriter.writeEndElement();

            xmlWriter.writeEndElement();


}

private static String generatePrefix(String namespace) {
    if(namespace.equals("http://www.oorsprong.org/websamples.countryinfo")){
        return "";
    }
    return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
}

/**
 * Utility method to write an element start tag.
 */
private void writeStartElement(String prefix, String namespace, String localPart,
                               javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String writerPrefix = xmlWriter.getPrefix(namespace);
    if (writerPrefix != null) {
        xmlWriter.writeStartElement(namespace, localPart);
    } else {
        if (namespace.length() == 0) {
            prefix = "";
        } else if (prefix == null) {
            prefix = generatePrefix(namespace);
        }

        xmlWriter.writeStartElement(prefix, localPart, namespace);
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
}

/**
 * Util method to write an attribute with the ns prefix
 */
private void writeAttribute(String prefix, String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (xmlWriter.getPrefix(namespace) == null) {
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    xmlWriter.writeAttribute(namespace,attName,attValue);
}

/**
 * Util method to write an attribute without the ns prefix
 */
private void writeAttribute(String namespace, String attName,
                            String attValue, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
    if (namespace.equals("")) {
        xmlWriter.writeAttribute(attName,attValue);
    } else {
        registerPrefix(xmlWriter, namespace);
        xmlWriter.writeAttribute(namespace,attName,attValue);
    }
}


   /**
     * Util method to write an attribute without the ns prefix
     */
    private void writeQNameAttribute(String namespace, String attName,
                                     javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

        String attributeNamespace = qname.getNamespaceURI();
        String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
        if (attributePrefix == null) {
            attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
        }
        String attributeValue;
        if (attributePrefix.trim().length() > 0) {
            attributeValue = attributePrefix + ":" + qname.getLocalPart();
        } else {
            attributeValue = qname.getLocalPart();
        }

        if (namespace.equals("")) {
            xmlWriter.writeAttribute(attName, attributeValue);
        } else {
            registerPrefix(xmlWriter, namespace);
            xmlWriter.writeAttribute(namespace, attName, attributeValue);
        }
    }
/**
 *  method to handle Qnames
 */

private void writeQName(javax.xml.namespace.QName qname,
                        javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
    String namespaceURI = qname.getNamespaceURI();
    if (namespaceURI != null) {
        String prefix = xmlWriter.getPrefix(namespaceURI);
        if (prefix == null) {
            prefix = generatePrefix(namespaceURI);
            xmlWriter.writeNamespace(prefix, namespaceURI);
            xmlWriter.setPrefix(prefix,namespaceURI);
        }

        if (prefix.trim().length() > 0){
            xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        } else {
            // i.e this is the default namespace
            xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
        }

    } else {
        xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
    }
}

private void writeQNames(javax.xml.namespace.QName[] qnames,
                         javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {

    if (qnames != null) {
        // we have to store this data until last moment since it is not possible to write any
        // namespace data after writing the charactor data
        StringBuffer stringToWrite = new StringBuffer();
        String namespaceURI = null;
        String prefix = null;

        for (int i = 0; i < qnames.length; i++) {
            if (i > 0) {
                stringToWrite.append(" ");
            }
            namespaceURI = qnames[i].getNamespaceURI();
            if (namespaceURI != null) {
                prefix = xmlWriter.getPrefix(namespaceURI);
                if ((prefix == null) || (prefix.length() == 0)) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix,namespaceURI);
                }

                if (prefix.trim().length() > 0){
                    stringToWrite.append(prefix).append(":").append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                } else {
                    stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
                }
            } else {
                stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qnames[i]));
            }
        }
        xmlWriter.writeCharacters(stringToWrite.toString());
    }

}


/**
 * Register a namespace prefix
 */
private String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, String namespace) throws javax.xml.stream.XMLStreamException {
    String prefix = xmlWriter.getPrefix(namespace);
    if (prefix == null) {
        prefix = generatePrefix(namespace);
        javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
        while (true) {
            String uri = nsContext.getNamespaceURI(prefix);
            if (uri == null || uri.length() == 0) {
                break;
            }
            prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }
        xmlWriter.writeNamespace(prefix, namespace);
        xmlWriter.setPrefix(prefix, namespace);
    }
    return prefix;
}



/**
* databinding method to get an XML representation of this object
*
*/
public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
            throws org.apache.axis2.databinding.ADBException{



         java.util.ArrayList elementList = new java.util.ArrayList();
         java.util.ArrayList attribList = new java.util.ArrayList();


                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sISOCode"));

                                if (localSISOCode != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSISOCode));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sISOCode cannot be null!!");
                                }

                              elementList.add(new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo",
                                                              "sName"));

                                if (localSName != null){
                                    elementList.add(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localSName));
                                } else {
                                   throw new org.apache.axis2.databinding.ADBException("sName cannot be null!!");
                                }


        return new org.apache.axis2.databinding.utils.reader.ADBXMLStreamReaderImpl(qName, elementList.toArray(), attribList.toArray());



}



/**
*  Factory class that keeps the parse method
*/
public static class Factory{




/**
* static method to create the object
* Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
*                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
* Postcondition: If this object is an element, the reader is positioned at its end element
*                If this object is a complex type, the reader is positioned at the end element of its outer element
*/
public static TLanguage parse(javax.xml.stream.XMLStreamReader reader) throws Exception{
    TLanguage object =
        new TLanguage();

    int event;
    String nillableValue = null;
    String prefix ="";
    String namespaceuri ="";
    try {

        while (!reader.isStartElement() && !reader.isEndElement())
            reader.next();


        if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type")!=null){
          String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                "type");
          if (fullTypeName!=null){
            String nsPrefix = null;
            if (fullTypeName.indexOf(":") > -1){
                nsPrefix = fullTypeName.substring(0,fullTypeName.indexOf(":"));
            }
            nsPrefix = nsPrefix==null?"":nsPrefix;

            String type = fullTypeName.substring(fullTypeName.indexOf(":")+1);

                    if (!"tLanguage".equals(type)){
                        //find namespace for the prefix
                        String nsUri = reader.getNamespaceContext().getNamespaceURI(nsPrefix);
                        return (TLanguage) ExtensionMapper.getTypeObject(
                             nsUri,type,reader);
                      }


          }


        }




        // Note all attributes that were handled. Used to differ normal attributes
        // from anyAttributes.
        java.util.Vector handledAttributes = new java.util.Vector();




            reader.next();


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sISOCode").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sISOCode" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSISOCode(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }


                            while (!reader.isStartElement() && !reader.isEndElement()) reader.next();

                            if (reader.isStartElement() && new javax.xml.namespace.QName("http://www.oorsprong.org/websamples.countryinfo","sName").equals(reader.getName())){

                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");
                            if ("true".equals(nillableValue) || "1".equals(nillableValue)){
                                throw new org.apache.axis2.databinding.ADBException("The element: "+"sName" +"  cannot be null");
                            }


                            String content = reader.getElementText();

                                      object.setSName(
                                            org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));

                                reader.next();

                      }  // End of if for expected property start element

                        else{
                            // A start element we are not expecting indicates an invalid parameter was passed
                            throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());
                        }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                        if (reader.isStartElement())
                        // A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getName());




    } catch (javax.xml.stream.XMLStreamException e) {
        throw new Exception(e);
    }

    return object;
}

}//end of factory class



}
}
   